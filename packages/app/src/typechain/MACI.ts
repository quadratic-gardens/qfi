/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

export type PubKeyStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type MaxValuesStruct = {
  maxMessages: BigNumberish;
  maxVoteOptions: BigNumberish;
};

export type MaxValuesStructOutput = [BigNumber, BigNumber] & {
  maxMessages: BigNumber;
  maxVoteOptions: BigNumber;
};

export type TreeDepthsStruct = {
  intStateTreeDepth: BigNumberish;
  messageTreeSubDepth: BigNumberish;
  messageTreeDepth: BigNumberish;
  voteOptionTreeDepth: BigNumberish;
};

export type TreeDepthsStructOutput = [number, number, number, number] & {
  intStateTreeDepth: number;
  messageTreeSubDepth: number;
  messageTreeDepth: number;
  voteOptionTreeDepth: number;
};

export type StateLeafStruct = {
  pubKey: PubKeyStruct;
  voiceCreditBalance: BigNumberish;
  timestamp: BigNumberish;
};

export type StateLeafStructOutput = [
  PubKeyStructOutput,
  BigNumber,
  BigNumber
] & {
  pubKey: PubKeyStructOutput;
  voiceCreditBalance: BigNumber;
  timestamp: BigNumber;
};

export interface MACIInterface extends utils.Interface {
  functions: {
    "deployPoll(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256))": FunctionFragment;
    "getPoll(uint256)": FunctionFragment;
    "getStateAqRoot()": FunctionFragment;
    "hash2(uint256[2])": FunctionFragment;
    "hash3(uint256[3])": FunctionFragment;
    "hash4(uint256[4])": FunctionFragment;
    "hash5(uint256[5])": FunctionFragment;
    "hashLeftRight(uint256,uint256)": FunctionFragment;
    "hashStateLeaf(((uint256,uint256),uint256,uint256))": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "initialVoiceCreditProxy()": FunctionFragment;
    "isInitialised()": FunctionFragment;
    "mergeStateAq(uint256)": FunctionFragment;
    "mergeStateAqSubRoots(uint256,uint256)": FunctionFragment;
    "messageAqFactory()": FunctionFragment;
    "numSignUps()": FunctionFragment;
    "numStateLeaves(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pollFactory()": FunctionFragment;
    "polls(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sha256Hash(uint256[])": FunctionFragment;
    "signUp((uint256,uint256),bytes,bytes)": FunctionFragment;
    "signUpGatekeeper()": FunctionFragment;
    "signUpTimestamp()": FunctionFragment;
    "stateAq()": FunctionFragment;
    "stateTreeDepth()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vkRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployPoll",
    values: [BigNumberish, MaxValuesStruct, TreeDepthsStruct, PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateAqRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash2",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash3",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashStateLeaf",
    values: [StateLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialVoiceCreditProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAq",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAqSubRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageAqFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numStateLeaves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pollFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "signUp",
    values: [PubKeyStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signUpGatekeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signUpTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stateAq", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stateTreeDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vkRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deployPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStateAqRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashStateLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialVoiceCreditProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageAqFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numSignUps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numStateLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pollFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signUpGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUpTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateAq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vkRegistry", data: BytesLike): Result;

  events: {
    "DeployPoll(uint256,address,tuple)": EventFragment;
    "Init(address,address)": EventFragment;
    "MergeStateAq(uint256)": EventFragment;
    "MergeStateAqSubRoots(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SignUp(uint256,tuple,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployPoll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeStateAq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeStateAqSubRoots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignUp"): EventFragment;
}

export type DeployPollEvent = TypedEvent<
  [BigNumber, string, PubKeyStructOutput],
  { _pollId: BigNumber; _pollAddr: string; _pubKey: PubKeyStructOutput }
>;

export type DeployPollEventFilter = TypedEventFilter<DeployPollEvent>;

export type InitEvent = TypedEvent<
  [string, string],
  { _vkRegistry: string; _messageAqFactory: string }
>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type MergeStateAqEvent = TypedEvent<[BigNumber], { _pollId: BigNumber }>;

export type MergeStateAqEventFilter = TypedEventFilter<MergeStateAqEvent>;

export type MergeStateAqSubRootsEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _pollId: BigNumber; _numSrQueueOps: BigNumber }
>;

export type MergeStateAqSubRootsEventFilter =
  TypedEventFilter<MergeStateAqSubRootsEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SignUpEvent = TypedEvent<
  [BigNumber, PubKeyStructOutput, BigNumber, BigNumber],
  {
    _stateIndex: BigNumber;
    _userPubKey: PubKeyStructOutput;
    _voiceCreditBalance: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type SignUpEventFilter = TypedEventFilter<SignUpEvent>;

export interface MACI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MACIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPoll(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStateAqRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<[string]>;

    isInitialised(overrides?: CallOverrides): Promise<[boolean]>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    messageAqFactory(overrides?: CallOverrides): Promise<[string]>;

    numSignUps(overrides?: CallOverrides): Promise<[BigNumber]>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pollFactory(overrides?: CallOverrides): Promise<[string]>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<[string]>;

    signUpTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateAq(overrides?: CallOverrides): Promise<[string]>;

    stateTreeDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vkRegistry(overrides?: CallOverrides): Promise<[string]>;
  };

  deployPoll(
    _duration: BigNumberish,
    _maxValues: MaxValuesStruct,
    _treeDepths: TreeDepthsStruct,
    _coordinatorPubKey: PubKeyStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPoll(_pollId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

  hash2(
    array: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash3(
    array: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash4(
    array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash5(
    array: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLeftRight(
    _left: BigNumberish,
    _right: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashStateLeaf(
    _stateLeaf: StateLeafStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _vkRegistry: string,
    _messageAqFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialVoiceCreditProxy(overrides?: CallOverrides): Promise<string>;

  isInitialised(overrides?: CallOverrides): Promise<boolean>;

  mergeStateAq(
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeStateAqSubRoots(
    _numSrQueueOps: BigNumberish,
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  messageAqFactory(overrides?: CallOverrides): Promise<string>;

  numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

  numStateLeaves(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pollFactory(overrides?: CallOverrides): Promise<string>;

  polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sha256Hash(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  signUp(
    _pubKey: PubKeyStruct,
    _signUpGatekeeperData: BytesLike,
    _initialVoiceCreditProxyData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

  signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  stateAq(overrides?: CallOverrides): Promise<string>;

  stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vkRegistry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getPoll(_pollId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<string>;

    isInitialised(overrides?: CallOverrides): Promise<boolean>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    messageAqFactory(overrides?: CallOverrides): Promise<string>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pollFactory(overrides?: CallOverrides): Promise<string>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    stateAq(overrides?: CallOverrides): Promise<string>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vkRegistry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DeployPoll(uint256,address,tuple)"(
      _pollId?: null,
      _pollAddr?: null,
      _pubKey?: null
    ): DeployPollEventFilter;
    DeployPoll(
      _pollId?: null,
      _pollAddr?: null,
      _pubKey?: null
    ): DeployPollEventFilter;

    "Init(address,address)"(
      _vkRegistry?: null,
      _messageAqFactory?: null
    ): InitEventFilter;
    Init(_vkRegistry?: null, _messageAqFactory?: null): InitEventFilter;

    "MergeStateAq(uint256)"(_pollId?: null): MergeStateAqEventFilter;
    MergeStateAq(_pollId?: null): MergeStateAqEventFilter;

    "MergeStateAqSubRoots(uint256,uint256)"(
      _pollId?: null,
      _numSrQueueOps?: null
    ): MergeStateAqSubRootsEventFilter;
    MergeStateAqSubRoots(
      _pollId?: null,
      _numSrQueueOps?: null
    ): MergeStateAqSubRootsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SignUp(uint256,tuple,uint256,uint256)"(
      _stateIndex?: null,
      _userPubKey?: null,
      _voiceCreditBalance?: null,
      _timestamp?: null
    ): SignUpEventFilter;
    SignUp(
      _stateIndex?: null,
      _userPubKey?: null,
      _voiceCreditBalance?: null,
      _timestamp?: null
    ): SignUpEventFilter;
  };

  estimateGas: {
    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPoll(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialised(overrides?: CallOverrides): Promise<BigNumber>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    messageAqFactory(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pollFactory(overrides?: CallOverrides): Promise<BigNumber>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<BigNumber>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    stateAq(overrides?: CallOverrides): Promise<BigNumber>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vkRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPoll(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateAqRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialVoiceCreditProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    messageAqFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSignUps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signUpTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateAq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateTreeDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vkRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
