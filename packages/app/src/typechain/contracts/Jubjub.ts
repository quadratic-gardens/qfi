/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Jubjub {
  export type PubKeyStruct = {
    x: PromiseOrValue<BigNumberish>;
    y: PromiseOrValue<BigNumberish>;
  };

  export type PubKeyStructOutput = [BigNumber, BigNumber] & {
    x: BigNumber;
    y: BigNumber;
  };

  export type MessageStruct = {
    msgType: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BigNumberish>[];
  };

  export type MessageStructOutput = [BigNumber, BigNumber[]] & {
    msgType: BigNumber;
    data: BigNumber[];
  };

  export type StateLeafStruct = {
    pubKey: Jubjub.PubKeyStruct;
    voiceCreditBalance: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type StateLeafStructOutput = [
    Jubjub.PubKeyStructOutput,
    BigNumber,
    BigNumber
  ] & {
    pubKey: Jubjub.PubKeyStructOutput;
    voiceCreditBalance: BigNumber;
    timestamp: BigNumber;
  };
}

export interface JubjubInterface extends utils.Interface {
  functions: {
    "blankMessageLeafHash()": FunctionFragment;
    "blankStateLeafHash()": FunctionFragment;
    "calculateCurrentMessageBatchIndex()": FunctionFragment;
    "coordinatorPubKey()": FunctionFragment;
    "coordinatorPubKeyHash()": FunctionFragment;
    "currentBallotCommitment()": FunctionFragment;
    "currentMessageCommitment()": FunctionFragment;
    "currentSbCommitment()": FunctionFragment;
    "currentStateCommitment()": FunctionFragment;
    "hash(uint256,uint256)": FunctionFragment;
    "hashMessageLeaf((uint256,uint256[10]),(uint256,uint256))": FunctionFragment;
    "hashStateLeaf(((uint256,uint256),uint256,uint256))": FunctionFragment;
    "initialize(uint256,uint256,uint256,uint256,uint256[],address,address,address,address)": FunctionFragment;
    "isInitialised()": FunctionFragment;
    "mergeMessageAq()": FunctionFragment;
    "mergeMessageAqSubRoots(uint256)": FunctionFragment;
    "mergeStateAq()": FunctionFragment;
    "mergeStateAqSubRoots(uint256)": FunctionFragment;
    "messageAq()": FunctionFragment;
    "messageTreeDepth()": FunctionFragment;
    "messageTreeSubDepth()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "numBatchesProcessed()": FunctionFragment;
    "numMessages()": FunctionFragment;
    "numPolls()": FunctionFragment;
    "numSignUps()": FunctionFragment;
    "openSignUpPeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "pollResults(uint256)": FunctionFragment;
    "polls(uint256)": FunctionFragment;
    "processMessages(uint256,uint256,uint256[8])": FunctionFragment;
    "publishMessage((uint256,uint256[10]),(uint256,uint256))": FunctionFragment;
    "publishMessageBatch((uint256,uint256[10])[],(uint256,uint256)[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetBallotCommitment(uint256)": FunctionFragment;
    "setVkRegistry(address)": FunctionFragment;
    "signUp((uint256,uint256),bytes,bytes)": FunctionFragment;
    "signUpGatekeeper()": FunctionFragment;
    "signUpTimestamp()": FunctionFragment;
    "signUpsOpen()": FunctionFragment;
    "startVoting(uint256,uint256,(uint256,uint256))": FunctionFragment;
    "stateAq()": FunctionFragment;
    "stateLeafTimeStamps(uint256)": FunctionFragment;
    "stateTreeDepth()": FunctionFragment;
    "stateTreeSubDepth()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vkRegistry()": FunctionFragment;
    "voiceCreditProxy()": FunctionFragment;
    "voteDeadline()": FunctionFragment;
    "voteDurationSeconds()": FunctionFragment;
    "voteOptionTreeDepth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blankMessageLeafHash"
      | "blankStateLeafHash"
      | "calculateCurrentMessageBatchIndex"
      | "coordinatorPubKey"
      | "coordinatorPubKeyHash"
      | "currentBallotCommitment"
      | "currentMessageCommitment"
      | "currentSbCommitment"
      | "currentStateCommitment"
      | "hash"
      | "hashMessageLeaf"
      | "hashStateLeaf"
      | "initialize"
      | "isInitialised"
      | "mergeMessageAq"
      | "mergeMessageAqSubRoots"
      | "mergeStateAq"
      | "mergeStateAqSubRoots"
      | "messageAq"
      | "messageTreeDepth"
      | "messageTreeSubDepth"
      | "multicall"
      | "numBatchesProcessed"
      | "numMessages"
      | "numPolls"
      | "numSignUps"
      | "openSignUpPeriod"
      | "owner"
      | "pollResults"
      | "polls"
      | "processMessages"
      | "publishMessage"
      | "publishMessageBatch"
      | "renounceOwnership"
      | "resetBallotCommitment"
      | "setVkRegistry"
      | "signUp"
      | "signUpGatekeeper"
      | "signUpTimestamp"
      | "signUpsOpen"
      | "startVoting"
      | "stateAq"
      | "stateLeafTimeStamps"
      | "stateTreeDepth"
      | "stateTreeSubDepth"
      | "transferOwnership"
      | "vkRegistry"
      | "voiceCreditProxy"
      | "voteDeadline"
      | "voteDurationSeconds"
      | "voteOptionTreeDepth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blankMessageLeafHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blankStateLeafHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurrentMessageBatchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBallotCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMessageCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSbCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStateCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessageLeaf",
    values: [Jubjub.MessageStruct, Jubjub.PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashStateLeaf",
    values: [Jubjub.StateLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAqSubRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAqSubRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "messageAq", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messageTreeDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageTreeSubDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numBatchesProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numMessages",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "numPolls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numSignUps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openSignUpPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pollResults",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "polls",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processMessages",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessage",
    values: [Jubjub.MessageStruct, Jubjub.PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessageBatch",
    values: [Jubjub.MessageStruct[], Jubjub.PubKeyStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetBallotCommitment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVkRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signUp",
    values: [
      Jubjub.PubKeyStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signUpGatekeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signUpTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signUpsOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      Jubjub.PubKeyStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "stateAq", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stateLeafTimeStamps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stateTreeDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stateTreeSubDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vkRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voiceCreditProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteOptionTreeDepth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "blankMessageLeafHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blankStateLeafHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurrentMessageBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBallotCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMessageCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSbCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashMessageLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashStateLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messageAq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageTreeSubDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numBatchesProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPolls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numSignUps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openSignUpPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pollResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishMessageBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetBallotCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVkRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signUpGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUpTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUpsOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateAq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateLeafTimeStamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateTreeSubDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vkRegistry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voiceCreditProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOptionTreeDepth",
    data: BytesLike
  ): Result;

  events: {
    "DeployPoll(uint256,address,tuple)": EventFragment;
    "Init(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MergeMaciStateAq(uint256)": EventFragment;
    "MergeMaciStateAqSubRoots(uint256,uint256)": EventFragment;
    "MergeMessageAq(uint256)": EventFragment;
    "MergeMessageAqSubRoots(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PublishMessage(tuple,tuple)": EventFragment;
    "SignUp(uint256,tuple,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployPoll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMaciStateAq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMaciStateAqSubRoots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMessageAq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMessageAqSubRoots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublishMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignUp"): EventFragment;
}

export interface DeployPollEventObject {
  _pollId: BigNumber;
  _pollAddr: string;
  _pubKey: Jubjub.PubKeyStructOutput;
}
export type DeployPollEvent = TypedEvent<
  [BigNumber, string, Jubjub.PubKeyStructOutput],
  DeployPollEventObject
>;

export type DeployPollEventFilter = TypedEventFilter<DeployPollEvent>;

export interface InitEventObject {
  _signUpGatekeeper: string;
  _topupCredit: string;
}
export type InitEvent = TypedEvent<[string, string], InitEventObject>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MergeMaciStateAqEventObject {
  _pollId: BigNumber;
}
export type MergeMaciStateAqEvent = TypedEvent<
  [BigNumber],
  MergeMaciStateAqEventObject
>;

export type MergeMaciStateAqEventFilter =
  TypedEventFilter<MergeMaciStateAqEvent>;

export interface MergeMaciStateAqSubRootsEventObject {
  _pollId: BigNumber;
  _numSrQueueOps: BigNumber;
}
export type MergeMaciStateAqSubRootsEvent = TypedEvent<
  [BigNumber, BigNumber],
  MergeMaciStateAqSubRootsEventObject
>;

export type MergeMaciStateAqSubRootsEventFilter =
  TypedEventFilter<MergeMaciStateAqSubRootsEvent>;

export interface MergeMessageAqEventObject {
  _messageRoot: BigNumber;
}
export type MergeMessageAqEvent = TypedEvent<
  [BigNumber],
  MergeMessageAqEventObject
>;

export type MergeMessageAqEventFilter = TypedEventFilter<MergeMessageAqEvent>;

export interface MergeMessageAqSubRootsEventObject {
  _numSrQueueOps: BigNumber;
}
export type MergeMessageAqSubRootsEvent = TypedEvent<
  [BigNumber],
  MergeMessageAqSubRootsEventObject
>;

export type MergeMessageAqSubRootsEventFilter =
  TypedEventFilter<MergeMessageAqSubRootsEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PublishMessageEventObject {
  _message: Jubjub.MessageStructOutput;
  _encPubKey: Jubjub.PubKeyStructOutput;
}
export type PublishMessageEvent = TypedEvent<
  [Jubjub.MessageStructOutput, Jubjub.PubKeyStructOutput],
  PublishMessageEventObject
>;

export type PublishMessageEventFilter = TypedEventFilter<PublishMessageEvent>;

export interface SignUpEventObject {
  _stateIndex: BigNumber;
  _userPubKey: Jubjub.PubKeyStructOutput;
  _voiceCreditBalance: BigNumber;
  _timestamp: BigNumber;
}
export type SignUpEvent = TypedEvent<
  [BigNumber, Jubjub.PubKeyStructOutput, BigNumber, BigNumber],
  SignUpEventObject
>;

export type SignUpEventFilter = TypedEventFilter<SignUpEvent>;

export interface Jubjub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JubjubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blankMessageLeafHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    blankStateLeafHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateCurrentMessageBatchIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    coordinatorPubKey(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    coordinatorPubKeyHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentBallotCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentMessageCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSbCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentStateCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    hash(
      _left: PromiseOrValue<BigNumberish>,
      _right: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashMessageLeaf(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashStateLeaf(
      _stateLeaf: Jubjub.StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _stateTreeDepth: PromiseOrValue<BigNumberish>,
      _messageTreeDepth: PromiseOrValue<BigNumberish>,
      _stateTreeSubDepth: PromiseOrValue<BigNumberish>,
      _messageTreeSubDepth: PromiseOrValue<BigNumberish>,
      _emptyBallotRoots: PromiseOrValue<BigNumberish>[],
      _signUpGatekeeper: PromiseOrValue<string>,
      _voiceCreditProxy: PromiseOrValue<string>,
      _stateAq: PromiseOrValue<string>,
      _messageAq: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialised(overrides?: CallOverrides): Promise<[boolean]>;

    mergeMessageAq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mergeStateAq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    messageAq(overrides?: CallOverrides): Promise<[string]>;

    messageTreeDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    messageTreeSubDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numBatchesProcessed(overrides?: CallOverrides): Promise<[BigNumber]>;

    numMessages(overrides?: CallOverrides): Promise<[BigNumber]>;

    numPolls(overrides?: CallOverrides): Promise<[BigNumber]>;

    numSignUps(overrides?: CallOverrides): Promise<[BigNumber]>;

    openSignUpPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pollResults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    processMessages(
      _newStateCommitment: PromiseOrValue<BigNumberish>,
      _newSbCommitment: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publishMessage(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publishMessageBatch(
      _messages: Jubjub.MessageStruct[],
      _encPubKeys: Jubjub.PubKeyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetBallotCommitment(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVkRegistry(
      _vkRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signUp(
      _pubKey: Jubjub.PubKeyStruct,
      _signUpGatekeeperData: PromiseOrValue<BytesLike>,
      _initialVoiceCreditProxyData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<[string]>;

    signUpTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    signUpsOpen(overrides?: CallOverrides): Promise<[boolean]>;

    startVoting(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _coordinatorPubKey: Jubjub.PubKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stateAq(overrides?: CallOverrides): Promise<[string]>;

    stateLeafTimeStamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stateTreeDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateTreeSubDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vkRegistry(overrides?: CallOverrides): Promise<[string]>;

    voiceCreditProxy(overrides?: CallOverrides): Promise<[string]>;

    voteDeadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteOptionTreeDepth(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  blankMessageLeafHash(overrides?: CallOverrides): Promise<BigNumber>;

  blankStateLeafHash(overrides?: CallOverrides): Promise<BigNumber>;

  calculateCurrentMessageBatchIndex(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coordinatorPubKey(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

  coordinatorPubKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

  currentBallotCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  currentMessageCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  currentSbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  currentStateCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  hash(
    _left: PromiseOrValue<BigNumberish>,
    _right: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashMessageLeaf(
    _message: Jubjub.MessageStruct,
    _encPubKey: Jubjub.PubKeyStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashStateLeaf(
    _stateLeaf: Jubjub.StateLeafStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _stateTreeDepth: PromiseOrValue<BigNumberish>,
    _messageTreeDepth: PromiseOrValue<BigNumberish>,
    _stateTreeSubDepth: PromiseOrValue<BigNumberish>,
    _messageTreeSubDepth: PromiseOrValue<BigNumberish>,
    _emptyBallotRoots: PromiseOrValue<BigNumberish>[],
    _signUpGatekeeper: PromiseOrValue<string>,
    _voiceCreditProxy: PromiseOrValue<string>,
    _stateAq: PromiseOrValue<string>,
    _messageAq: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialised(overrides?: CallOverrides): Promise<boolean>;

  mergeMessageAq(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mergeMessageAqSubRoots(
    _numSrQueueOps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mergeStateAq(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mergeStateAqSubRoots(
    _numSrQueueOps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  messageAq(overrides?: CallOverrides): Promise<string>;

  messageTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

  messageTreeSubDepth(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numBatchesProcessed(overrides?: CallOverrides): Promise<BigNumber>;

  numMessages(overrides?: CallOverrides): Promise<BigNumber>;

  numPolls(overrides?: CallOverrides): Promise<BigNumber>;

  numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

  openSignUpPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pollResults(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  polls(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  processMessages(
    _newStateCommitment: PromiseOrValue<BigNumberish>,
    _newSbCommitment: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publishMessage(
    _message: Jubjub.MessageStruct,
    _encPubKey: Jubjub.PubKeyStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publishMessageBatch(
    _messages: Jubjub.MessageStruct[],
    _encPubKeys: Jubjub.PubKeyStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetBallotCommitment(
    _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVkRegistry(
    _vkRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signUp(
    _pubKey: Jubjub.PubKeyStruct,
    _signUpGatekeeperData: PromiseOrValue<BytesLike>,
    _initialVoiceCreditProxyData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

  signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  signUpsOpen(overrides?: CallOverrides): Promise<boolean>;

  startVoting(
    _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    _coordinatorPubKey: Jubjub.PubKeyStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stateAq(overrides?: CallOverrides): Promise<string>;

  stateLeafTimeStamps(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

  stateTreeSubDepth(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vkRegistry(overrides?: CallOverrides): Promise<string>;

  voiceCreditProxy(overrides?: CallOverrides): Promise<string>;

  voteDeadline(overrides?: CallOverrides): Promise<BigNumber>;

  voteDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  voteOptionTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    blankMessageLeafHash(overrides?: CallOverrides): Promise<BigNumber>;

    blankStateLeafHash(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentMessageBatchIndex(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coordinatorPubKey(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    coordinatorPubKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    currentBallotCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentMessageCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentSbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentStateCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      _left: PromiseOrValue<BigNumberish>,
      _right: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessageLeaf(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: Jubjub.StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stateTreeDepth: PromiseOrValue<BigNumberish>,
      _messageTreeDepth: PromiseOrValue<BigNumberish>,
      _stateTreeSubDepth: PromiseOrValue<BigNumberish>,
      _messageTreeSubDepth: PromiseOrValue<BigNumberish>,
      _emptyBallotRoots: PromiseOrValue<BigNumberish>[],
      _signUpGatekeeper: PromiseOrValue<string>,
      _voiceCreditProxy: PromiseOrValue<string>,
      _stateAq: PromiseOrValue<string>,
      _messageAq: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialised(overrides?: CallOverrides): Promise<boolean>;

    mergeMessageAq(overrides?: CallOverrides): Promise<void>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mergeStateAq(overrides?: CallOverrides): Promise<void>;

    mergeStateAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    messageAq(overrides?: CallOverrides): Promise<string>;

    messageTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    messageTreeSubDepth(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    numBatchesProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    numMessages(overrides?: CallOverrides): Promise<BigNumber>;

    numPolls(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    openSignUpPeriod(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pollResults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    processMessages(
      _newStateCommitment: PromiseOrValue<BigNumberish>,
      _newSbCommitment: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    publishMessage(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    publishMessageBatch(
      _messages: Jubjub.MessageStruct[],
      _encPubKeys: Jubjub.PubKeyStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetBallotCommitment(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVkRegistry(
      _vkRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signUp(
      _pubKey: Jubjub.PubKeyStruct,
      _signUpGatekeeperData: PromiseOrValue<BytesLike>,
      _initialVoiceCreditProxyData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    signUpsOpen(overrides?: CallOverrides): Promise<boolean>;

    startVoting(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _coordinatorPubKey: Jubjub.PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    stateAq(overrides?: CallOverrides): Promise<string>;

    stateLeafTimeStamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    stateTreeSubDepth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vkRegistry(overrides?: CallOverrides): Promise<string>;

    voiceCreditProxy(overrides?: CallOverrides): Promise<string>;

    voteDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    voteDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    voteOptionTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DeployPoll(uint256,address,tuple)"(
      _pollId?: null,
      _pollAddr?: null,
      _pubKey?: null
    ): DeployPollEventFilter;
    DeployPoll(
      _pollId?: null,
      _pollAddr?: null,
      _pubKey?: null
    ): DeployPollEventFilter;

    "Init(address,address)"(
      _signUpGatekeeper?: null,
      _topupCredit?: null
    ): InitEventFilter;
    Init(_signUpGatekeeper?: null, _topupCredit?: null): InitEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MergeMaciStateAq(uint256)"(_pollId?: null): MergeMaciStateAqEventFilter;
    MergeMaciStateAq(_pollId?: null): MergeMaciStateAqEventFilter;

    "MergeMaciStateAqSubRoots(uint256,uint256)"(
      _pollId?: null,
      _numSrQueueOps?: null
    ): MergeMaciStateAqSubRootsEventFilter;
    MergeMaciStateAqSubRoots(
      _pollId?: null,
      _numSrQueueOps?: null
    ): MergeMaciStateAqSubRootsEventFilter;

    "MergeMessageAq(uint256)"(_messageRoot?: null): MergeMessageAqEventFilter;
    MergeMessageAq(_messageRoot?: null): MergeMessageAqEventFilter;

    "MergeMessageAqSubRoots(uint256)"(
      _numSrQueueOps?: null
    ): MergeMessageAqSubRootsEventFilter;
    MergeMessageAqSubRoots(
      _numSrQueueOps?: null
    ): MergeMessageAqSubRootsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PublishMessage(tuple,tuple)"(
      _message?: null,
      _encPubKey?: null
    ): PublishMessageEventFilter;
    PublishMessage(
      _message?: null,
      _encPubKey?: null
    ): PublishMessageEventFilter;

    "SignUp(uint256,tuple,uint256,uint256)"(
      _stateIndex?: null,
      _userPubKey?: null,
      _voiceCreditBalance?: null,
      _timestamp?: null
    ): SignUpEventFilter;
    SignUp(
      _stateIndex?: null,
      _userPubKey?: null,
      _voiceCreditBalance?: null,
      _timestamp?: null
    ): SignUpEventFilter;
  };

  estimateGas: {
    blankMessageLeafHash(overrides?: CallOverrides): Promise<BigNumber>;

    blankStateLeafHash(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCurrentMessageBatchIndex(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coordinatorPubKey(overrides?: CallOverrides): Promise<BigNumber>;

    coordinatorPubKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    currentBallotCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentMessageCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentSbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    currentStateCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      _left: PromiseOrValue<BigNumberish>,
      _right: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessageLeaf(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: Jubjub.StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stateTreeDepth: PromiseOrValue<BigNumberish>,
      _messageTreeDepth: PromiseOrValue<BigNumberish>,
      _stateTreeSubDepth: PromiseOrValue<BigNumberish>,
      _messageTreeSubDepth: PromiseOrValue<BigNumberish>,
      _emptyBallotRoots: PromiseOrValue<BigNumberish>[],
      _signUpGatekeeper: PromiseOrValue<string>,
      _voiceCreditProxy: PromiseOrValue<string>,
      _stateAq: PromiseOrValue<string>,
      _messageAq: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialised(overrides?: CallOverrides): Promise<BigNumber>;

    mergeMessageAq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mergeStateAq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mergeStateAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    messageAq(overrides?: CallOverrides): Promise<BigNumber>;

    messageTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    messageTreeSubDepth(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numBatchesProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    numMessages(overrides?: CallOverrides): Promise<BigNumber>;

    numPolls(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    openSignUpPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pollResults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processMessages(
      _newStateCommitment: PromiseOrValue<BigNumberish>,
      _newSbCommitment: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publishMessage(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publishMessageBatch(
      _messages: Jubjub.MessageStruct[],
      _encPubKeys: Jubjub.PubKeyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetBallotCommitment(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVkRegistry(
      _vkRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signUp(
      _pubKey: Jubjub.PubKeyStruct,
      _signUpGatekeeperData: PromiseOrValue<BytesLike>,
      _initialVoiceCreditProxyData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<BigNumber>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    signUpsOpen(overrides?: CallOverrides): Promise<BigNumber>;

    startVoting(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _coordinatorPubKey: Jubjub.PubKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stateAq(overrides?: CallOverrides): Promise<BigNumber>;

    stateLeafTimeStamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    stateTreeSubDepth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vkRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    voiceCreditProxy(overrides?: CallOverrides): Promise<BigNumber>;

    voteDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    voteDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    voteOptionTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blankMessageLeafHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blankStateLeafHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCurrentMessageBatchIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coordinatorPubKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinatorPubKeyHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentBallotCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMessageCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSbCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentStateCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash(
      _left: PromiseOrValue<BigNumberish>,
      _right: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashMessageLeaf(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashStateLeaf(
      _stateLeaf: Jubjub.StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stateTreeDepth: PromiseOrValue<BigNumberish>,
      _messageTreeDepth: PromiseOrValue<BigNumberish>,
      _stateTreeSubDepth: PromiseOrValue<BigNumberish>,
      _messageTreeSubDepth: PromiseOrValue<BigNumberish>,
      _emptyBallotRoots: PromiseOrValue<BigNumberish>[],
      _signUpGatekeeper: PromiseOrValue<string>,
      _voiceCreditProxy: PromiseOrValue<string>,
      _stateAq: PromiseOrValue<string>,
      _messageAq: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeMessageAq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mergeStateAq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    messageAq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageTreeDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageTreeSubDepth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numBatchesProcessed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPolls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSignUps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openSignUpPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollResults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    polls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processMessages(
      _newStateCommitment: PromiseOrValue<BigNumberish>,
      _newSbCommitment: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publishMessage(
      _message: Jubjub.MessageStruct,
      _encPubKey: Jubjub.PubKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publishMessageBatch(
      _messages: Jubjub.MessageStruct[],
      _encPubKeys: Jubjub.PubKeyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetBallotCommitment(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVkRegistry(
      _vkRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signUp(
      _pubKey: Jubjub.PubKeyStruct,
      _signUpGatekeeperData: PromiseOrValue<BytesLike>,
      _initialVoiceCreditProxyData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signUpTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signUpsOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startVoting(
      _voteOptionTreeDepth: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _coordinatorPubKey: Jubjub.PubKeyStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stateAq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateLeafTimeStamps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateTreeDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateTreeSubDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vkRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voiceCreditProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteDeadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOptionTreeDepth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
