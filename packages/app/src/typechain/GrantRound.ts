/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MaxValuesStruct = {
  maxMessages: BigNumberish;
  maxVoteOptions: BigNumberish;
};

export type MaxValuesStructOutput = [BigNumber, BigNumber] & {
  maxMessages: BigNumber;
  maxVoteOptions: BigNumber;
};

export type TreeDepthsStruct = {
  intStateTreeDepth: BigNumberish;
  messageTreeSubDepth: BigNumberish;
  messageTreeDepth: BigNumberish;
  voteOptionTreeDepth: BigNumberish;
};

export type TreeDepthsStructOutput = [number, number, number, number] & {
  intStateTreeDepth: number;
  messageTreeSubDepth: number;
  messageTreeDepth: number;
  voteOptionTreeDepth: number;
};

export type BatchSizesStruct = {
  messageBatchSize: BigNumberish;
  tallyBatchSize: BigNumberish;
};

export type BatchSizesStructOutput = [number, number] & {
  messageBatchSize: number;
  tallyBatchSize: number;
};

export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

export type PubKeyStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type ExtContractsStruct = {
  vkRegistry: string;
  maci: string;
  messageAq: string;
};

export type ExtContractsStructOutput = [string, string, string] & {
  vkRegistry: string;
  maci: string;
  messageAq: string;
};

export type MessageStruct = { data: BigNumberish[] };

export type MessageStructOutput = [BigNumber[]] & { data: BigNumber[] };

export interface GrantRoundInterface extends utils.Interface {
  functions: {
    "alpha()": FunctionFragment;
    "batchEnqueueMessage(uint256)": FunctionFragment;
    "batchSizes()": FunctionFragment;
    "cancel()": FunctionFragment;
    "claimFunds(uint256,uint256,uint256[][],uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "coordinator()": FunctionFragment;
    "coordinatorPubKey()": FunctionFragment;
    "coordinatorPubKeyHash()": FunctionFragment;
    "currentSbCommitment()": FunctionFragment;
    "extContracts()": FunctionFragment;
    "finalize(uint256)": FunctionFragment;
    "getAllocatedAmount(uint256,uint256)": FunctionFragment;
    "getDeployTimeAndDuration()": FunctionFragment;
    "hash2(uint256[2])": FunctionFragment;
    "hash3(uint256[3])": FunctionFragment;
    "hash4(uint256[4])": FunctionFragment;
    "hash5(uint256[5])": FunctionFragment;
    "hashLeftRight(uint256,uint256)": FunctionFragment;
    "hashMessageAndEncPubKey((uint256[10]),(uint256,uint256))": FunctionFragment;
    "isAfterDeadline()": FunctionFragment;
    "isCancelled()": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "matchingPoolSize()": FunctionFragment;
    "maxValues()": FunctionFragment;
    "mergeMaciStateAq(uint256)": FunctionFragment;
    "mergeMaciStateAqSubRoots(uint256,uint256)": FunctionFragment;
    "mergeMessageAq()": FunctionFragment;
    "mergeMessageAqSubRoots(uint256)": FunctionFragment;
    "mergedStateRoot()": FunctionFragment;
    "nativeToken()": FunctionFragment;
    "numSignUpsAndMessages()": FunctionFragment;
    "owner()": FunctionFragment;
    "publishMessage((uint256[10]),(uint256,uint256))": FunctionFragment;
    "publishMessageBatch((uint256[10])[],(uint256,uint256)[])": FunctionFragment;
    "publishTallyHash(string)": FunctionFragment;
    "recipientRegistry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sha256Hash(uint256[])": FunctionFragment;
    "stateAqMerged()": FunctionFragment;
    "tallyHash()": FunctionFragment;
    "totalSpent()": FunctionFragment;
    "totalVotes()": FunctionFragment;
    "transferMatchingFunds(uint256,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treeDepths()": FunctionFragment;
    "verifyPerVOSpentVoiceCredits(uint256,uint256,uint256[][],uint256)": FunctionFragment;
    "verifySpentVoiceCredits(uint256,uint256)": FunctionFragment;
    "verifyTallyResult(uint256,uint256,uint256[][],uint256,uint256,uint256,uint256)": FunctionFragment;
    "voiceCreditFactor()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "alpha", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchEnqueueMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSizes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "coordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coordinatorPubKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSbCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocatedAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployTimeAndDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash2",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash3",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMessageAndEncPubKey",
    values: [MessageStruct, PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isAfterDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCancelled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "matchingPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxValues", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mergeMaciStateAq",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMaciStateAqSubRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeMessageAqSubRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergedStateRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUpsAndMessages",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishMessage",
    values: [MessageStruct, PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "publishMessageBatch",
    values: [MessageStruct[], PubKeyStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "publishTallyHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stateAqMerged",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tallyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferMatchingFunds",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treeDepths",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPerVOSpentVoiceCredits",
    values: [BigNumberish, BigNumberish, BigNumberish[][], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySpentVoiceCredits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTallyResult",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[][],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voiceCreditFactor",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "alpha", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchEnqueueMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchSizes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coordinatorPubKeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSbCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllocatedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployTimeAndDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMessageAndEncPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAfterDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchingPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxValues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mergeMaciStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMaciStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeMessageAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergedStateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numSignUpsAndMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishMessageBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishTallyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateAqMerged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSpent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMatchingFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treeDepths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyPerVOSpentVoiceCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySpentVoiceCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTallyResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voiceCreditFactor",
    data: BytesLike
  ): Result;

  events: {
    "FundsClaimed(address,uint256,uint256)": EventFragment;
    "GrantRoundCancelled(bool,bool)": EventFragment;
    "MergeMaciStateAq(uint256)": EventFragment;
    "MergeMaciStateAqSubRoots(uint256)": EventFragment;
    "MergeMessageAq(uint256)": EventFragment;
    "MergeMessageAqSubRoots(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PublishMessage(tuple,tuple)": EventFragment;
    "TallyPublished(string)": EventFragment;
    "Voted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantRoundCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMaciStateAq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMaciStateAqSubRoots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMessageAq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeMessageAqSubRoots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublishMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TallyPublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export type FundsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    _recipient: string;
    _voteOptionIndex: BigNumber;
    _allocatedAmount: BigNumber;
  }
>;

export type FundsClaimedEventFilter = TypedEventFilter<FundsClaimedEvent>;

export type GrantRoundCancelledEvent = TypedEvent<
  [boolean, boolean],
  { _isFinalized: boolean; _isCancelled: boolean }
>;

export type GrantRoundCancelledEventFilter =
  TypedEventFilter<GrantRoundCancelledEvent>;

export type MergeMaciStateAqEvent = TypedEvent<
  [BigNumber],
  { _stateRoot: BigNumber }
>;

export type MergeMaciStateAqEventFilter =
  TypedEventFilter<MergeMaciStateAqEvent>;

export type MergeMaciStateAqSubRootsEvent = TypedEvent<
  [BigNumber],
  { _numSrQueueOps: BigNumber }
>;

export type MergeMaciStateAqSubRootsEventFilter =
  TypedEventFilter<MergeMaciStateAqSubRootsEvent>;

export type MergeMessageAqEvent = TypedEvent<
  [BigNumber],
  { _messageRoot: BigNumber }
>;

export type MergeMessageAqEventFilter = TypedEventFilter<MergeMessageAqEvent>;

export type MergeMessageAqSubRootsEvent = TypedEvent<
  [BigNumber],
  { _numSrQueueOps: BigNumber }
>;

export type MergeMessageAqSubRootsEventFilter =
  TypedEventFilter<MergeMessageAqSubRootsEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PublishMessageEvent = TypedEvent<
  [MessageStructOutput, PubKeyStructOutput],
  { _message: MessageStructOutput; _encPubKey: PubKeyStructOutput }
>;

export type PublishMessageEventFilter = TypedEventFilter<PublishMessageEvent>;

export type TallyPublishedEvent = TypedEvent<[string], { _tallyHash: string }>;

export type TallyPublishedEventFilter = TypedEventFilter<TallyPublishedEvent>;

export type VotedEvent = TypedEvent<[string], { _voter: string }>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface GrantRound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GrantRoundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    alpha(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchEnqueueMessage(
      _messageSubRoot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSizes(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { messageBatchSize: number; tallyBatchSize: number }
    >;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      _spent: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coordinator(overrides?: CallOverrides): Promise<[string]>;

    coordinatorPubKey(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    coordinatorPubKeyHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSbCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    extContracts(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        vkRegistry: string;
        maci: string;
        messageAq: string;
      }
    >;

    finalize(
      _alphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDeployTimeAndDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashMessageAndEncPubKey(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAfterDeadline(overrides?: CallOverrides): Promise<[boolean]>;

    isCancelled(overrides?: CallOverrides): Promise<[boolean]>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    matchingPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxMessages: BigNumber;
        maxVoteOptions: BigNumber;
      }
    >;

    mergeMaciStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeMaciStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeMessageAq(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergedStateRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    nativeToken(overrides?: CallOverrides): Promise<[string]>;

    numSignUpsAndMessages(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publishMessage(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publishMessageBatch(
      _messages: MessageStruct[],
      _encPubKeys: PubKeyStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recipientRegistry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stateAqMerged(overrides?: CallOverrides): Promise<[boolean]>;

    tallyHash(overrides?: CallOverrides): Promise<[string]>;

    totalSpent(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferMatchingFunds(
      _voteOptionIndex: BigNumberish,
      _payoutAmount: BigNumberish,
      _erc20Address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treeDepths(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        intStateTreeDepth: number;
        messageTreeSubDepth: number;
        messageTreeDepth: number;
        voteOptionTreeDepth: number;
      }
    >;

    verifyPerVOSpentVoiceCredits(
      _voteOptionIndex: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifySpentVoiceCredits(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyTallyResult(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  alpha(overrides?: CallOverrides): Promise<BigNumber>;

  batchEnqueueMessage(
    _messageSubRoot: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSizes(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { messageBatchSize: number; tallyBatchSize: number }
  >;

  cancel(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFunds(
    _voteOptionIndex: BigNumberish,
    _tallyResult: BigNumberish,
    _tallyResultProof: BigNumberish[][],
    _tallyResultSalt: BigNumberish,
    _spentVoiceCreditsHash: BigNumberish,
    _perVOSpentVoiceCreditsHash: BigNumberish,
    _tallyCommitment: BigNumberish,
    _spent: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coordinator(overrides?: CallOverrides): Promise<string>;

  coordinatorPubKey(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

  coordinatorPubKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

  currentSbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  extContracts(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      vkRegistry: string;
      maci: string;
      messageAq: string;
    }
  >;

  finalize(
    _alphaDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllocatedAmount(
    _tallyResult: BigNumberish,
    _spent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDeployTimeAndDuration(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  hash2(
    array: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash3(
    array: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash4(
    array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash5(
    array: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLeftRight(
    _left: BigNumberish,
    _right: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashMessageAndEncPubKey(
    _message: MessageStruct,
    _encPubKey: PubKeyStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAfterDeadline(overrides?: CallOverrides): Promise<boolean>;

  isCancelled(overrides?: CallOverrides): Promise<boolean>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  matchingPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  maxValues(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      maxMessages: BigNumber;
      maxVoteOptions: BigNumber;
    }
  >;

  mergeMaciStateAq(
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeMaciStateAqSubRoots(
    _numSrQueueOps: BigNumberish,
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeMessageAq(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeMessageAqSubRoots(
    _numSrQueueOps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergedStateRoot(overrides?: CallOverrides): Promise<BigNumber>;

  nativeToken(overrides?: CallOverrides): Promise<string>;

  numSignUpsAndMessages(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  owner(overrides?: CallOverrides): Promise<string>;

  publishMessage(
    _message: MessageStruct,
    _encPubKey: PubKeyStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publishMessageBatch(
    _messages: MessageStruct[],
    _encPubKeys: PubKeyStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publishTallyHash(
    _tallyHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recipientRegistry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sha256Hash(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stateAqMerged(overrides?: CallOverrides): Promise<boolean>;

  tallyHash(overrides?: CallOverrides): Promise<string>;

  totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

  totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  transferMatchingFunds(
    _voteOptionIndex: BigNumberish,
    _payoutAmount: BigNumberish,
    _erc20Address: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treeDepths(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      intStateTreeDepth: number;
      messageTreeSubDepth: number;
      messageTreeDepth: number;
      voteOptionTreeDepth: number;
    }
  >;

  verifyPerVOSpentVoiceCredits(
    _voteOptionIndex: BigNumberish,
    _spent: BigNumberish,
    _spentProof: BigNumberish[][],
    _spentSalt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifySpentVoiceCredits(
    _totalSpent: BigNumberish,
    _totalSpentSalt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyTallyResult(
    _voteOptionIndex: BigNumberish,
    _tallyResult: BigNumberish,
    _tallyResultProof: BigNumberish[][],
    _tallyResultSalt: BigNumberish,
    _spentVoiceCreditsHash: BigNumberish,
    _perVOSpentVoiceCreditsHash: BigNumberish,
    _tallyCommitment: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    alpha(overrides?: CallOverrides): Promise<BigNumber>;

    batchEnqueueMessage(
      _messageSubRoot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchSizes(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { messageBatchSize: number; tallyBatchSize: number }
    >;

    cancel(overrides?: CallOverrides): Promise<void>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    coordinator(overrides?: CallOverrides): Promise<string>;

    coordinatorPubKey(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    coordinatorPubKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    currentSbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    extContracts(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        vkRegistry: string;
        maci: string;
        messageAq: string;
      }
    >;

    finalize(
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployTimeAndDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessageAndEncPubKey(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAfterDeadline(overrides?: CallOverrides): Promise<boolean>;

    isCancelled(overrides?: CallOverrides): Promise<boolean>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    matchingPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxMessages: BigNumber;
        maxVoteOptions: BigNumber;
      }
    >;

    mergeMaciStateAq(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mergeMaciStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mergeMessageAq(overrides?: CallOverrides): Promise<void>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mergedStateRoot(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<string>;

    numSignUpsAndMessages(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    publishMessage(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    publishMessageBatch(
      _messages: MessageStruct[],
      _encPubKeys: PubKeyStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recipientRegistry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateAqMerged(overrides?: CallOverrides): Promise<boolean>;

    tallyHash(overrides?: CallOverrides): Promise<string>;

    totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    transferMatchingFunds(
      _voteOptionIndex: BigNumberish,
      _payoutAmount: BigNumberish,
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treeDepths(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        intStateTreeDepth: number;
        messageTreeSubDepth: number;
        messageTreeDepth: number;
        voteOptionTreeDepth: number;
      }
    >;

    verifyPerVOSpentVoiceCredits(
      _voteOptionIndex: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifySpentVoiceCredits(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyTallyResult(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "FundsClaimed(address,uint256,uint256)"(
      _recipient?: null,
      _voteOptionIndex?: null,
      _allocatedAmount?: null
    ): FundsClaimedEventFilter;
    FundsClaimed(
      _recipient?: null,
      _voteOptionIndex?: null,
      _allocatedAmount?: null
    ): FundsClaimedEventFilter;

    "GrantRoundCancelled(bool,bool)"(
      _isFinalized?: null,
      _isCancelled?: null
    ): GrantRoundCancelledEventFilter;
    GrantRoundCancelled(
      _isFinalized?: null,
      _isCancelled?: null
    ): GrantRoundCancelledEventFilter;

    "MergeMaciStateAq(uint256)"(_stateRoot?: null): MergeMaciStateAqEventFilter;
    MergeMaciStateAq(_stateRoot?: null): MergeMaciStateAqEventFilter;

    "MergeMaciStateAqSubRoots(uint256)"(
      _numSrQueueOps?: null
    ): MergeMaciStateAqSubRootsEventFilter;
    MergeMaciStateAqSubRoots(
      _numSrQueueOps?: null
    ): MergeMaciStateAqSubRootsEventFilter;

    "MergeMessageAq(uint256)"(_messageRoot?: null): MergeMessageAqEventFilter;
    MergeMessageAq(_messageRoot?: null): MergeMessageAqEventFilter;

    "MergeMessageAqSubRoots(uint256)"(
      _numSrQueueOps?: null
    ): MergeMessageAqSubRootsEventFilter;
    MergeMessageAqSubRoots(
      _numSrQueueOps?: null
    ): MergeMessageAqSubRootsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PublishMessage(tuple,tuple)"(
      _message?: null,
      _encPubKey?: null
    ): PublishMessageEventFilter;
    PublishMessage(
      _message?: null,
      _encPubKey?: null
    ): PublishMessageEventFilter;

    "TallyPublished(string)"(_tallyHash?: null): TallyPublishedEventFilter;
    TallyPublished(_tallyHash?: null): TallyPublishedEventFilter;

    "Voted(address)"(_voter?: string | null): VotedEventFilter;
    Voted(_voter?: string | null): VotedEventFilter;
  };

  estimateGas: {
    alpha(overrides?: CallOverrides): Promise<BigNumber>;

    batchEnqueueMessage(
      _messageSubRoot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSizes(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      _spent: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coordinator(overrides?: CallOverrides): Promise<BigNumber>;

    coordinatorPubKey(overrides?: CallOverrides): Promise<BigNumber>;

    coordinatorPubKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    currentSbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    extContracts(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _alphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployTimeAndDuration(overrides?: CallOverrides): Promise<BigNumber>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMessageAndEncPubKey(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAfterDeadline(overrides?: CallOverrides): Promise<BigNumber>;

    isCancelled(overrides?: CallOverrides): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    matchingPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    maxValues(overrides?: CallOverrides): Promise<BigNumber>;

    mergeMaciStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeMaciStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeMessageAq(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergedStateRoot(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUpsAndMessages(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publishMessage(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publishMessageBatch(
      _messages: MessageStruct[],
      _encPubKeys: PubKeyStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recipientRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateAqMerged(overrides?: CallOverrides): Promise<BigNumber>;

    tallyHash(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    transferMatchingFunds(
      _voteOptionIndex: BigNumberish,
      _payoutAmount: BigNumberish,
      _erc20Address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treeDepths(overrides?: CallOverrides): Promise<BigNumber>;

    verifyPerVOSpentVoiceCredits(
      _voteOptionIndex: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySpentVoiceCredits(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTallyResult(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    alpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchEnqueueMessage(
      _messageSubRoot: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSizes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFunds(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      _spent: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinatorPubKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coordinatorPubKeyHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSbCommitment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      _alphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllocatedAmount(
      _tallyResult: BigNumberish,
      _spent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployTimeAndDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashMessageAndEncPubKey(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAfterDeadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCancelled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchingPoolSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxValues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeMaciStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeMaciStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeMessageAq(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeMessageAqSubRoots(
      _numSrQueueOps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergedStateRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSignUpsAndMessages(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishMessage(
      _message: MessageStruct,
      _encPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publishMessageBatch(
      _messages: MessageStruct[],
      _encPubKeys: PubKeyStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publishTallyHash(
      _tallyHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recipientRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateAqMerged(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tallyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSpent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferMatchingFunds(
      _voteOptionIndex: BigNumberish,
      _payoutAmount: BigNumberish,
      _erc20Address: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treeDepths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyPerVOSpentVoiceCredits(
      _voteOptionIndex: BigNumberish,
      _spent: BigNumberish,
      _spentProof: BigNumberish[][],
      _spentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySpentVoiceCredits(
      _totalSpent: BigNumberish,
      _totalSpentSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTallyResult(
      _voteOptionIndex: BigNumberish,
      _tallyResult: BigNumberish,
      _tallyResultProof: BigNumberish[][],
      _tallyResultSalt: BigNumberish,
      _spentVoiceCreditsHash: BigNumberish,
      _perVOSpentVoiceCreditsHash: BigNumberish,
      _tallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
