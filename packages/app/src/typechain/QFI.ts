/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PubKeyStruct = { x: BigNumberish; y: BigNumberish };

export type PubKeyStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type MaxValuesStruct = {
  maxMessages: BigNumberish;
  maxVoteOptions: BigNumberish;
};

export type MaxValuesStructOutput = [BigNumber, BigNumber] & {
  maxMessages: BigNumber;
  maxVoteOptions: BigNumber;
};

export type TreeDepthsStruct = {
  intStateTreeDepth: BigNumberish;
  messageTreeSubDepth: BigNumberish;
  messageTreeDepth: BigNumberish;
  voteOptionTreeDepth: BigNumberish;
};

export type TreeDepthsStructOutput = [number, number, number, number] & {
  intStateTreeDepth: number;
  messageTreeSubDepth: number;
  messageTreeDepth: number;
  voteOptionTreeDepth: number;
};

export type BatchSizesStruct = {
  messageBatchSize: BigNumberish;
  tallyBatchSize: BigNumberish;
};

export type BatchSizesStructOutput = [number, number] & {
  messageBatchSize: number;
  tallyBatchSize: number;
};

export type StateLeafStruct = {
  pubKey: PubKeyStruct;
  voiceCreditBalance: BigNumberish;
  timestamp: BigNumberish;
};

export type StateLeafStructOutput = [
  PubKeyStructOutput,
  BigNumber,
  BigNumber
] & {
  pubKey: PubKeyStructOutput;
  voiceCreditBalance: BigNumber;
  timestamp: BigNumber;
};

export interface QFIInterface extends utils.Interface {
  functions: {
    "acceptContributionsAndTopUpsBeforeNewRound()": FunctionFragment;
    "addFundingSource(address)": FunctionFragment;
    "closeVotingAndWaitForDeadline()": FunctionFragment;
    "contribute((uint256,uint256),uint256)": FunctionFragment;
    "contributorCount()": FunctionFragment;
    "currentGrantRound()": FunctionFragment;
    "currentStage()": FunctionFragment;
    "deployGrantRound(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address)": FunctionFragment;
    "deployPoll(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256))": FunctionFragment;
    "finalizeCurrentRound(uint256,uint256,uint256)": FunctionFragment;
    "getGrantRound(uint256)": FunctionFragment;
    "getMatchingFunds(address)": FunctionFragment;
    "getPoll(uint256)": FunctionFragment;
    "getStateAqRoot()": FunctionFragment;
    "getVoiceCredits(address,bytes)": FunctionFragment;
    "getVotingDeadline(uint256)": FunctionFragment;
    "grantRoundFactory()": FunctionFragment;
    "grantRounds(uint256)": FunctionFragment;
    "hash2(uint256[2])": FunctionFragment;
    "hash3(uint256[3])": FunctionFragment;
    "hash4(uint256[4])": FunctionFragment;
    "hash5(uint256[5])": FunctionFragment;
    "hashLeftRight(uint256,uint256)": FunctionFragment;
    "hashStateLeaf(((uint256,uint256),uint256,uint256))": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "initialVoiceCreditProxy()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isInitialised()": FunctionFragment;
    "mergeStateAq(uint256)": FunctionFragment;
    "mergeStateAqSubRoots(uint256,uint256)": FunctionFragment;
    "messageAqFactory()": FunctionFragment;
    "messageAqFactoryGrants()": FunctionFragment;
    "nativeToken()": FunctionFragment;
    "nextGrantRoundId()": FunctionFragment;
    "numSignUps()": FunctionFragment;
    "numStateLeaves(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pollFactory()": FunctionFragment;
    "pollProcessorAndTallyer()": FunctionFragment;
    "polls(uint256)": FunctionFragment;
    "removeFundingSource(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPollProcessorAndTallyer(address)": FunctionFragment;
    "sha256Hash(uint256[])": FunctionFragment;
    "signUp((uint256,uint256),bytes,bytes)": FunctionFragment;
    "signUpGatekeeper()": FunctionFragment;
    "signUpTimestamp()": FunctionFragment;
    "stateAq()": FunctionFragment;
    "stateTreeDepth()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vkRegistry()": FunctionFragment;
    "voiceCreditFactor()": FunctionFragment;
    "withdrawContribution()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptContributionsAndTopUpsBeforeNewRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFundingSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "closeVotingAndWaitForDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [PubKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentGrantRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployGrantRound",
    values: [
      BigNumberish,
      MaxValuesStruct,
      TreeDepthsStruct,
      PubKeyStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPoll",
    values: [BigNumberish, MaxValuesStruct, TreeDepthsStruct, PubKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCurrentRound",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGrantRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchingFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateAqRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoiceCredits",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoundFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hash2",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash3",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashStateLeaf",
    values: [StateLeafStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialVoiceCreditProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAq",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAqSubRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageAqFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageAqFactoryGrants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextGrantRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numStateLeaves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pollFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pollProcessorAndTallyer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "removeFundingSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPollProcessorAndTallyer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "signUp",
    values: [PubKeyStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signUpGatekeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signUpTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stateAq", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stateTreeDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vkRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voiceCreditFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContribution",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptContributionsAndTopUpsBeforeNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFundingSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeVotingAndWaitForDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentGrantRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployGrantRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGrantRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMatchingFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStateAqRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoiceCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRoundFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashStateLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialVoiceCreditProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageAqFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageAqFactoryGrants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextGrantRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numSignUps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numStateLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pollFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pollProcessorAndTallyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFundingSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPollProcessorAndTallyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signUpGatekeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUpTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateAq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vkRegistry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voiceCreditFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContribution",
    data: BytesLike
  ): Result;

  events: {
    "ContributionSent(address,uint256)": EventFragment;
    "ContributionWithdrew(address)": EventFragment;
    "DeployPoll(uint256,address,tuple)": EventFragment;
    "FundingSourceAdded(address)": EventFragment;
    "FundingSourceRemoved(address)": EventFragment;
    "GrantRoundDeployed(address,uint256,tuple,tuple,tuple,tuple,uint8)": EventFragment;
    "GrantRoundFinalized(address,uint8)": EventFragment;
    "Init(address,address)": EventFragment;
    "MergeStateAq(uint256)": EventFragment;
    "MergeStateAqSubRoots(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PollProcessorAndTallyerChanged(address)": EventFragment;
    "PreRoundContributionPeriodStarted(uint8)": EventFragment;
    "QfiDeployed(address,address,uint256,uint8)": EventFragment;
    "QfiInitialized(address,uint8)": EventFragment;
    "SignUp(uint256,tuple,uint256,uint256)": EventFragment;
    "VotingPeriodClosed(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContributionSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributionWithdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployPoll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingSourceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingSourceRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantRoundDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantRoundFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeStateAq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MergeStateAqSubRoots"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PollProcessorAndTallyerChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PreRoundContributionPeriodStarted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QfiDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QfiInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodClosed"): EventFragment;
}

export type ContributionSentEvent = TypedEvent<
  [string, BigNumber],
  { _contributor: string; _amount: BigNumber }
>;

export type ContributionSentEventFilter =
  TypedEventFilter<ContributionSentEvent>;

export type ContributionWithdrewEvent = TypedEvent<
  [string],
  { _contributor: string }
>;

export type ContributionWithdrewEventFilter =
  TypedEventFilter<ContributionWithdrewEvent>;

export type DeployPollEvent = TypedEvent<
  [BigNumber, string, PubKeyStructOutput],
  { _pollId: BigNumber; _pollAddr: string; _pubKey: PubKeyStructOutput }
>;

export type DeployPollEventFilter = TypedEventFilter<DeployPollEvent>;

export type FundingSourceAddedEvent = TypedEvent<[string], { _source: string }>;

export type FundingSourceAddedEventFilter =
  TypedEventFilter<FundingSourceAddedEvent>;

export type FundingSourceRemovedEvent = TypedEvent<
  [string],
  { _source: string }
>;

export type FundingSourceRemovedEventFilter =
  TypedEventFilter<FundingSourceRemovedEvent>;

export type GrantRoundDeployedEvent = TypedEvent<
  [
    string,
    BigNumber,
    MaxValuesStructOutput,
    TreeDepthsStructOutput,
    BatchSizesStructOutput,
    PubKeyStructOutput,
    number
  ],
  {
    _currentGrantRound: string;
    _duration: BigNumber;
    _maxValues: MaxValuesStructOutput;
    _treeDepths: TreeDepthsStructOutput;
    _batchSizes: BatchSizesStructOutput;
    _coordinatorPubKey: PubKeyStructOutput;
    _currentStage: number;
  }
>;

export type GrantRoundDeployedEventFilter =
  TypedEventFilter<GrantRoundDeployedEvent>;

export type GrantRoundFinalizedEvent = TypedEvent<
  [string, number],
  { _currentGrantRound: string; _currentStage: number }
>;

export type GrantRoundFinalizedEventFilter =
  TypedEventFilter<GrantRoundFinalizedEvent>;

export type InitEvent = TypedEvent<
  [string, string],
  { _vkRegistry: string; _messageAqFactory: string }
>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type MergeStateAqEvent = TypedEvent<[BigNumber], { _pollId: BigNumber }>;

export type MergeStateAqEventFilter = TypedEventFilter<MergeStateAqEvent>;

export type MergeStateAqSubRootsEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _pollId: BigNumber; _numSrQueueOps: BigNumber }
>;

export type MergeStateAqSubRootsEventFilter =
  TypedEventFilter<MergeStateAqSubRootsEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PollProcessorAndTallyerChangedEvent = TypedEvent<
  [string],
  { _pollProcessorAndTallyer: string }
>;

export type PollProcessorAndTallyerChangedEventFilter =
  TypedEventFilter<PollProcessorAndTallyerChangedEvent>;

export type PreRoundContributionPeriodStartedEvent = TypedEvent<
  [number],
  { _currentStage: number }
>;

export type PreRoundContributionPeriodStartedEventFilter =
  TypedEventFilter<PreRoundContributionPeriodStartedEvent>;

export type QfiDeployedEvent = TypedEvent<
  [string, string, BigNumber, number],
  {
    _grantRoundFactory: string;
    _nativeToken: string;
    _voiceCreditFactor: BigNumber;
    _currentStage: number;
  }
>;

export type QfiDeployedEventFilter = TypedEventFilter<QfiDeployedEvent>;

export type QfiInitializedEvent = TypedEvent<
  [string, number],
  { _messageAqFactoryGrantRounds: string; _currentStage: number }
>;

export type QfiInitializedEventFilter = TypedEventFilter<QfiInitializedEvent>;

export type SignUpEvent = TypedEvent<
  [BigNumber, PubKeyStructOutput, BigNumber, BigNumber],
  {
    _stateIndex: BigNumber;
    _userPubKey: PubKeyStructOutput;
    _voiceCreditBalance: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type SignUpEventFilter = TypedEventFilter<SignUpEvent>;

export type VotingPeriodClosedEvent = TypedEvent<
  [number],
  { _currentStage: number }
>;

export type VotingPeriodClosedEventFilter =
  TypedEventFilter<VotingPeriodClosedEvent>;

export interface QFI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QFIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptContributionsAndTopUpsBeforeNewRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFundingSource(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeVotingAndWaitForDeadline(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contribute(
      pubKey: PubKeyStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentGrantRound(overrides?: CallOverrides): Promise<[string]>;

    currentStage(overrides?: CallOverrides): Promise<[number]>;

    deployGrantRound(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      coordinator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeCurrentRound(
      _finalTallyCommitment: BigNumberish,
      _finalSbCommitment: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGrantRound(
      _grantRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMatchingFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoll(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStateAqRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotingDeadline(
      grantRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRoundFactory(overrides?: CallOverrides): Promise<[string]>;

    grantRounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _vkRegistry: string,
      _messageAqFactoryPolls: string,
      _messageAqFactoryGrantRounds: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialised(overrides?: CallOverrides): Promise<[boolean]>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    messageAqFactory(overrides?: CallOverrides): Promise<[string]>;

    messageAqFactoryGrants(overrides?: CallOverrides): Promise<[string]>;

    nativeToken(overrides?: CallOverrides): Promise<[string]>;

    nextGrantRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    numSignUps(overrides?: CallOverrides): Promise<[BigNumber]>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pollFactory(overrides?: CallOverrides): Promise<[string]>;

    pollProcessorAndTallyer(overrides?: CallOverrides): Promise<[string]>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    removeFundingSource(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPollProcessorAndTallyer(
      _pollProcessorAndTallyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<[string]>;

    signUpTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateAq(overrides?: CallOverrides): Promise<[string]>;

    stateTreeDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vkRegistry(overrides?: CallOverrides): Promise<[string]>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawContribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptContributionsAndTopUpsBeforeNewRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFundingSource(
    _source: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeVotingAndWaitForDeadline(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contribute(
    pubKey: PubKeyStruct,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

  currentGrantRound(overrides?: CallOverrides): Promise<string>;

  currentStage(overrides?: CallOverrides): Promise<number>;

  deployGrantRound(
    _duration: BigNumberish,
    _maxValues: MaxValuesStruct,
    _treeDepths: TreeDepthsStruct,
    _coordinatorPubKey: PubKeyStruct,
    coordinator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPoll(
    _duration: BigNumberish,
    _maxValues: MaxValuesStruct,
    _treeDepths: TreeDepthsStruct,
    _coordinatorPubKey: PubKeyStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeCurrentRound(
    _finalTallyCommitment: BigNumberish,
    _finalSbCommitment: BigNumberish,
    _alphaDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGrantRound(
    _grantRoundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMatchingFunds(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoll(_pollId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getVoiceCredits(
    arg0: string,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotingDeadline(
    grantRound: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRoundFactory(overrides?: CallOverrides): Promise<string>;

  grantRounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  hash2(
    array: [BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash3(
    array: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash4(
    array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hash5(
    array: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLeftRight(
    _left: BigNumberish,
    _right: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashStateLeaf(
    _stateLeaf: StateLeafStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _vkRegistry: string,
    _messageAqFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialVoiceCreditProxy(overrides?: CallOverrides): Promise<string>;

  initialize(
    _vkRegistry: string,
    _messageAqFactoryPolls: string,
    _messageAqFactoryGrantRounds: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialised(overrides?: CallOverrides): Promise<boolean>;

  mergeStateAq(
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeStateAqSubRoots(
    _numSrQueueOps: BigNumberish,
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  messageAqFactory(overrides?: CallOverrides): Promise<string>;

  messageAqFactoryGrants(overrides?: CallOverrides): Promise<string>;

  nativeToken(overrides?: CallOverrides): Promise<string>;

  nextGrantRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

  numStateLeaves(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pollFactory(overrides?: CallOverrides): Promise<string>;

  pollProcessorAndTallyer(overrides?: CallOverrides): Promise<string>;

  polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removeFundingSource(
    _source: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPollProcessorAndTallyer(
    _pollProcessorAndTallyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sha256Hash(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  signUp(
    _pubKey: PubKeyStruct,
    _signUpGatekeeperData: BytesLike,
    _initialVoiceCreditProxyData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

  signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  stateAq(overrides?: CallOverrides): Promise<string>;

  stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vkRegistry(overrides?: CallOverrides): Promise<string>;

  voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawContribution(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptContributionsAndTopUpsBeforeNewRound(
      overrides?: CallOverrides
    ): Promise<void>;

    addFundingSource(_source: string, overrides?: CallOverrides): Promise<void>;

    closeVotingAndWaitForDeadline(overrides?: CallOverrides): Promise<void>;

    contribute(
      pubKey: PubKeyStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentGrantRound(overrides?: CallOverrides): Promise<string>;

    currentStage(overrides?: CallOverrides): Promise<number>;

    deployGrantRound(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      coordinator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeCurrentRound(
      _finalTallyCommitment: BigNumberish,
      _finalSbCommitment: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getGrantRound(
      _grantRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMatchingFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoll(_pollId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingDeadline(
      grantRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRoundFactory(overrides?: CallOverrides): Promise<string>;

    grantRounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<string>;

    initialize(
      _vkRegistry: string,
      _messageAqFactoryPolls: string,
      _messageAqFactoryGrantRounds: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialised(overrides?: CallOverrides): Promise<boolean>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    messageAqFactory(overrides?: CallOverrides): Promise<string>;

    messageAqFactoryGrants(overrides?: CallOverrides): Promise<string>;

    nativeToken(overrides?: CallOverrides): Promise<string>;

    nextGrantRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pollFactory(overrides?: CallOverrides): Promise<string>;

    pollProcessorAndTallyer(overrides?: CallOverrides): Promise<string>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    removeFundingSource(
      _source: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPollProcessorAndTallyer(
      _pollProcessorAndTallyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<string>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    stateAq(overrides?: CallOverrides): Promise<string>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vkRegistry(overrides?: CallOverrides): Promise<string>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawContribution(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ContributionSent(address,uint256)"(
      _contributor?: null,
      _amount?: null
    ): ContributionSentEventFilter;
    ContributionSent(
      _contributor?: null,
      _amount?: null
    ): ContributionSentEventFilter;

    "ContributionWithdrew(address)"(
      _contributor?: null
    ): ContributionWithdrewEventFilter;
    ContributionWithdrew(_contributor?: null): ContributionWithdrewEventFilter;

    "DeployPoll(uint256,address,tuple)"(
      _pollId?: null,
      _pollAddr?: null,
      _pubKey?: null
    ): DeployPollEventFilter;
    DeployPoll(
      _pollId?: null,
      _pollAddr?: null,
      _pubKey?: null
    ): DeployPollEventFilter;

    "FundingSourceAdded(address)"(
      _source?: null
    ): FundingSourceAddedEventFilter;
    FundingSourceAdded(_source?: null): FundingSourceAddedEventFilter;

    "FundingSourceRemoved(address)"(
      _source?: null
    ): FundingSourceRemovedEventFilter;
    FundingSourceRemoved(_source?: null): FundingSourceRemovedEventFilter;

    "GrantRoundDeployed(address,uint256,tuple,tuple,tuple,tuple,uint8)"(
      _currentGrantRound?: null,
      _duration?: null,
      _maxValues?: null,
      _treeDepths?: null,
      _batchSizes?: null,
      _coordinatorPubKey?: null,
      _currentStage?: null
    ): GrantRoundDeployedEventFilter;
    GrantRoundDeployed(
      _currentGrantRound?: null,
      _duration?: null,
      _maxValues?: null,
      _treeDepths?: null,
      _batchSizes?: null,
      _coordinatorPubKey?: null,
      _currentStage?: null
    ): GrantRoundDeployedEventFilter;

    "GrantRoundFinalized(address,uint8)"(
      _currentGrantRound?: null,
      _currentStage?: null
    ): GrantRoundFinalizedEventFilter;
    GrantRoundFinalized(
      _currentGrantRound?: null,
      _currentStage?: null
    ): GrantRoundFinalizedEventFilter;

    "Init(address,address)"(
      _vkRegistry?: null,
      _messageAqFactory?: null
    ): InitEventFilter;
    Init(_vkRegistry?: null, _messageAqFactory?: null): InitEventFilter;

    "MergeStateAq(uint256)"(_pollId?: null): MergeStateAqEventFilter;
    MergeStateAq(_pollId?: null): MergeStateAqEventFilter;

    "MergeStateAqSubRoots(uint256,uint256)"(
      _pollId?: null,
      _numSrQueueOps?: null
    ): MergeStateAqSubRootsEventFilter;
    MergeStateAqSubRoots(
      _pollId?: null,
      _numSrQueueOps?: null
    ): MergeStateAqSubRootsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PollProcessorAndTallyerChanged(address)"(
      _pollProcessorAndTallyer?: null
    ): PollProcessorAndTallyerChangedEventFilter;
    PollProcessorAndTallyerChanged(
      _pollProcessorAndTallyer?: null
    ): PollProcessorAndTallyerChangedEventFilter;

    "PreRoundContributionPeriodStarted(uint8)"(
      _currentStage?: null
    ): PreRoundContributionPeriodStartedEventFilter;
    PreRoundContributionPeriodStarted(
      _currentStage?: null
    ): PreRoundContributionPeriodStartedEventFilter;

    "QfiDeployed(address,address,uint256,uint8)"(
      _grantRoundFactory?: null,
      _nativeToken?: null,
      _voiceCreditFactor?: null,
      _currentStage?: null
    ): QfiDeployedEventFilter;
    QfiDeployed(
      _grantRoundFactory?: null,
      _nativeToken?: null,
      _voiceCreditFactor?: null,
      _currentStage?: null
    ): QfiDeployedEventFilter;

    "QfiInitialized(address,uint8)"(
      _messageAqFactoryGrantRounds?: null,
      _currentStage?: null
    ): QfiInitializedEventFilter;
    QfiInitialized(
      _messageAqFactoryGrantRounds?: null,
      _currentStage?: null
    ): QfiInitializedEventFilter;

    "SignUp(uint256,tuple,uint256,uint256)"(
      _stateIndex?: null,
      _userPubKey?: null,
      _voiceCreditBalance?: null,
      _timestamp?: null
    ): SignUpEventFilter;
    SignUp(
      _stateIndex?: null,
      _userPubKey?: null,
      _voiceCreditBalance?: null,
      _timestamp?: null
    ): SignUpEventFilter;

    "VotingPeriodClosed(uint8)"(
      _currentStage?: null
    ): VotingPeriodClosedEventFilter;
    VotingPeriodClosed(_currentStage?: null): VotingPeriodClosedEventFilter;
  };

  estimateGas: {
    acceptContributionsAndTopUpsBeforeNewRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFundingSource(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeVotingAndWaitForDeadline(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contribute(
      pubKey: PubKeyStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    currentGrantRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentStage(overrides?: CallOverrides): Promise<BigNumber>;

    deployGrantRound(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      coordinator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeCurrentRound(
      _finalTallyCommitment: BigNumberish,
      _finalSbCommitment: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGrantRound(
      _grantRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchingFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoll(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingDeadline(
      grantRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRoundFactory(overrides?: CallOverrides): Promise<BigNumber>;

    grantRounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialVoiceCreditProxy(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vkRegistry: string,
      _messageAqFactoryPolls: string,
      _messageAqFactoryGrantRounds: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialised(overrides?: CallOverrides): Promise<BigNumber>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    messageAqFactory(overrides?: CallOverrides): Promise<BigNumber>;

    messageAqFactoryGrants(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<BigNumber>;

    nextGrantRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pollFactory(overrides?: CallOverrides): Promise<BigNumber>;

    pollProcessorAndTallyer(overrides?: CallOverrides): Promise<BigNumber>;

    polls(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removeFundingSource(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPollProcessorAndTallyer(
      _pollProcessorAndTallyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<BigNumber>;

    signUpTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    stateAq(overrides?: CallOverrides): Promise<BigNumber>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vkRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawContribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptContributionsAndTopUpsBeforeNewRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFundingSource(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeVotingAndWaitForDeadline(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      pubKey: PubKeyStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentGrantRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployGrantRound(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      coordinator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPoll(
      _duration: BigNumberish,
      _maxValues: MaxValuesStruct,
      _treeDepths: TreeDepthsStruct,
      _coordinatorPubKey: PubKeyStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeCurrentRound(
      _finalTallyCommitment: BigNumberish,
      _finalSbCommitment: BigNumberish,
      _alphaDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGrantRound(
      _grantRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatchingFunds(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoll(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateAqRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoiceCredits(
      arg0: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingDeadline(
      grantRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRoundFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash2(
      array: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash3(
      array: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash4(
      array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hash5(
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLeftRight(
      _left: BigNumberish,
      _right: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashStateLeaf(
      _stateLeaf: StateLeafStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _vkRegistry: string,
      _messageAqFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialVoiceCreditProxy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _vkRegistry: string,
      _messageAqFactoryPolls: string,
      _messageAqFactoryGrantRounds: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    messageAqFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageAqFactoryGrants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextGrantRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSignUps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numStateLeaves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollProcessorAndTallyer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    polls(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFundingSource(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPollProcessorAndTallyer(
      _pollProcessorAndTallyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signUp(
      _pubKey: PubKeyStruct,
      _signUpGatekeeperData: BytesLike,
      _initialVoiceCreditProxyData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signUpGatekeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signUpTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateAq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateTreeDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vkRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voiceCreditFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawContribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
