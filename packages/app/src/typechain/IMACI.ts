/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMACIInterface extends utils.Interface {
  functions: {
    "getStateAqRoot()": FunctionFragment;
    "mergeStateAq(uint256)": FunctionFragment;
    "mergeStateAqSubRoots(uint256,uint256)": FunctionFragment;
    "numSignUps()": FunctionFragment;
    "stateAq()": FunctionFragment;
    "stateTreeDepth()": FunctionFragment;
    "vkRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getStateAqRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAq",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeStateAqSubRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numSignUps",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stateAq", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stateTreeDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vkRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getStateAqRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeStateAqSubRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numSignUps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stateAq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stateTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vkRegistry", data: BytesLike): Result;

  events: {};
}

export interface IMACI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMACIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getStateAqRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numSignUps(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateAq(overrides?: CallOverrides): Promise<[string]>;

    stateTreeDepth(overrides?: CallOverrides): Promise<[BigNumber]>;

    vkRegistry(overrides?: CallOverrides): Promise<[string]>;
  };

  getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

  mergeStateAq(
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeStateAqSubRoots(
    _numSrQueueOps: BigNumberish,
    _pollId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

  stateAq(overrides?: CallOverrides): Promise<string>;

  stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

  vkRegistry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    stateAq(overrides?: CallOverrides): Promise<string>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    vkRegistry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getStateAqRoot(overrides?: CallOverrides): Promise<BigNumber>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numSignUps(overrides?: CallOverrides): Promise<BigNumber>;

    stateAq(overrides?: CallOverrides): Promise<BigNumber>;

    stateTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    vkRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getStateAqRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeStateAq(
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeStateAqSubRoots(
      _numSrQueueOps: BigNumberish,
      _pollId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numSignUps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateAq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateTreeDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vkRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
