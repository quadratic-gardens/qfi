/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Verifier, VerifierInterface } from "../Verifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "_proof",
        type: "uint256[8]",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "alpha1",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "beta2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "gamma2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "delta2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point[]",
            name: "ic",
            type: "tuple[]",
          },
        ],
        internalType: "struct SnarkCommon.VerifyingKey",
        name: "vk",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "input",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f10806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806322b72c9414610030575b600080fd5b61004361003e366004610c2d565b610059565b6040516100509190610cd0565b60405180910390f35b6000610063610976565b6040805180820182528651815260208088015181830152908352815160808082018452888401518285019081526060808b01519084015282528351808501855290890151815260a08901518184015281830152838201528151808301835260c0880151815260e088015181830152838301528251518251808401909352600383526256453160e81b91830191909152600080516020610ebb833981519152116101285760405162461bcd60e51b815260040161011f9190610cdb565b60405180910390fd5b50600080516020610ebb833981519152816000015160200151106040518060400160405280600381526020016256453160e81b8152509061017c5760405162461bcd60e51b815260040161011f9190610cdb565b50602081810151515160408051808201909152600381526256453160e81b92810192909252600080516020610ebb833981519152116101ce5760405162461bcd60e51b815260040161011f9190610cdb565b506020818101518101515160408051808201909152600381526256453160e81b92810192909252600080516020610ebb833981519152116102225760405162461bcd60e51b815260040161011f9190610cdb565b50602081015151600080516020610ebb8339815191529060016020020151106040518060400160405280600381526020016256453160e81b8152509061027b5760405162461bcd60e51b815260040161011f9190610cdb565b506020808201510151600080516020610ebb8339815191529060016020020151106040518060400160405280600381526020016256453160e81b815250906102d65760405162461bcd60e51b815260040161011f9190610cdb565b50604080820151518151808301909252600382526256453160e81b6020830152600080516020610ebb833981519152116103235760405162461bcd60e51b815260040161011f9190610cdb565b50600080516020610ebb833981519152816040015160200151106040518060400160405280600381526020016256453160e81b815250906103775760405162461bcd60e51b815260040161011f9190610cdb565b506040805180820190915260038152622b229960e91b60208201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184106103d25760405162461bcd60e51b815260040161011f9190610cdb565b5060006040518060400160405280600081526020016000815250905061042d81610428876080015160018151811061041a57634e487b7160e01b600052603260045260246000fd5b6020026020010151876104a5565b610510565b905061046581866080015160008151811061045857634e487b7160e01b600052603260045260246000fd5b6020026020010151610510565b905061049b6104778360000151610577565b836020015187600001518860200151858a6040015188604001518c60600151610604565b9695505050505050565b6104ad6109a8565b6104b56109c2565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080156104e8576104ea565bfe5b50806105085760405162461bcd60e51b815260040161011f90610d2e565b505092915050565b6105186109a8565b6105206109e0565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080156104e85750806105085760405162461bcd60e51b815260040161011f90610d5a565b61057f6109a8565b815115801561059057506020820151155b156105af575060408051808201909152600080825260208201526105ff565b604051806040016040528083600001518152602001600080516020610ebb83398151915284602001516105e29190610e6e565b6105fa90600080516020610ebb833981519152610e3c565b905290505b919050565b60408051608080820183528a825260208083018a90528284018890526060808401879052845192830185528b83528282018a9052828501889052820185905283516018808252610320820190955260009491859190839082016103008036833701905050905060005b600481101561091c576000610683826006610e1d565b90508582600481106106a557634e487b7160e01b600052603260045260246000fd5b602002015151836106b7836000610e05565b815181106106d557634e487b7160e01b600052603260045260246000fd5b60200260200101818152505085826004811061070157634e487b7160e01b600052603260045260246000fd5b602002015160200151838260016107189190610e05565b8151811061073657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505084826004811061076257634e487b7160e01b600052603260045260246000fd5b6020020151515183610775836002610e05565b8151811061079357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508482600481106107bf57634e487b7160e01b600052603260045260246000fd5b60200201515160016020020151836107d8836003610e05565b815181106107f657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505084826004811061082257634e487b7160e01b600052603260045260246000fd5b60200201516020015160006002811061084b57634e487b7160e01b600052603260045260246000fd5b60200201518361085c836004610e05565b8151811061087a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508482600481106108a657634e487b7160e01b600052603260045260246000fd5b6020020151602001516001600281106108cf57634e487b7160e01b600052603260045260246000fd5b6020020151836108e0836005610e05565b815181106108fe57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152508061091481610e53565b91505061066d565b506109256109fe565b6000602082602086026020860160086107d05a03fa90508080156104e85750806109615760405162461bcd60e51b815260040161011f90610d86565b505115159d9c50505050505050505050505050565b60405180606001604052806109896109a8565b8152602001610996610a1c565b81526020016109a36109a8565b905290565b604051806040016040528060008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280610a2f610a38565b81526020016109a35b60405180604001604052806002906020820280368337509192915050565b600082601f830112610a66578081fd5b610a706040610db5565b808385604086011115610a81578384fd5b835b6002811015610aa2578135845260209384019390910190600101610a83565b509095945050505050565b600060408284031215610abe578081fd5b610ac86040610db5565b9050813581526020820135602082015292915050565b600060808284031215610aef578081fd5b610af96040610db5565b9050610b058383610a56565b8152610b148360408401610a56565b602082015292915050565b60006101e08284031215610b31578081fd5b610b3b60a0610db5565b9050610b478383610aad565b81526040610b5784828501610ade565b60208181850152610b6b8660c08701610ade565b83850152610b7d866101408701610ade565b60608501526101c085013591506001600160401b0380831115610b9f57600080fd5b828601925086601f840112610bb357600080fd5b823581811115610bc557610bc5610ea4565b610bd28384830201610db5565b8181528381019250848401868302860185018a1015610bf057600080fd5b600095505b82861015610c1b57610c078a82610aad565b845260019590950194928401928601610bf5565b50608087015250939695505050505050565b60008060006101408486031215610c42578283fd5b84601f850112610c50578283fd5b6008610c63610c5e82610de5565b610db5565b8086610100880189811115610c76578788fd5b875b85811015610c96578235855260209485019490920191600101610c78565b5091965050359150506001600160401b03811115610cb2578283fd5b610cbe86828701610b1f565b92505061012084013590509250925092565b901515815260200190565b6000602080835283518082850152825b81811015610d0757858101830151858201604001528201610ceb565b81811115610d185783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601290820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604082015260600190565b6020808252601290820152711c185a5c9a5b99cb5859190b59985a5b195960721b604082015260600190565b6020808252601590820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715610ddd57610ddd610ea4565b604052919050565b60006001600160401b03821115610dfe57610dfe610ea4565b5060200290565b60008219821115610e1857610e18610e8e565b500190565b6000816000190483118215151615610e3757610e37610e8e565b500290565b600082821015610e4e57610e4e610e8e565b500390565b6000600019821415610e6757610e67610e8e565b5060010190565b600082610e8957634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122033e30c407014aa20c20e626b0450a2b733ef0a770e59305b6cfcefced9ee378464736f6c63430008010033";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Verifier> {
    return super.deploy(overrides || {}) as Promise<Verifier>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Verifier {
    return super.attach(address) as Verifier;
  }
  connect(signer: Signer): Verifier__factory {
    return super.connect(signer) as Verifier__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new utils.Interface(_abi) as VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier {
    return new Contract(address, _abi, signerOrProvider) as Verifier;
  }
}
