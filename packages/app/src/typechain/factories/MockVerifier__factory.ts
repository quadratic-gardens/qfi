/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockVerifier, MockVerifierInterface } from "../MockVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "",
        type: "uint256[8]",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "alpha1",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "beta2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "gamma2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "x",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "delta2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point[]",
            name: "ic",
            type: "tuple[]",
          },
        ],
        internalType: "struct SnarkCommon.VerifyingKey",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805460ff1916600117905534801561001d57600080fd5b506103878061002d6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806322b72c9414610030575b600080fd5b61004361003e36600461023d565b610059565b60405161005091906102e0565b60405180910390f35b60005460ff169392505050565b600082601f830112610076578081fd5b61008060406102eb565b808385604086011115610091578384fd5b835b60028110156100b2578135845260209384019390910190600101610093565b509095945050505050565b6000604082840312156100ce578081fd5b6100d860406102eb565b9050813581526020820135602082015292915050565b6000608082840312156100ff578081fd5b61010960406102eb565b90506101158383610066565b81526101248360408401610066565b602082015292915050565b60006101e08284031215610141578081fd5b61014b60a06102eb565b905061015783836100bd565b81526040610167848285016100ee565b6020818185015261017b8660c087016100ee565b8385015261018d8661014087016100ee565b60608501526101c085013591506001600160401b03808311156101af57600080fd5b828601925086601f8401126101c357600080fd5b8235818111156101d5576101d561033b565b6101e283848302016102eb565b8181528381019250848401868302860185018a101561020057600080fd5b600095505b8286101561022b576102178a826100bd565b845260019590950194928401928601610205565b50608087015250939695505050505050565b60008060006101408486031215610252578283fd5b84601f850112610260578283fd5b600861027361026e8261031b565b6102eb565b8086610100880189811115610286578788fd5b875b858110156102a6578235855260209485019490920191600101610288565b5091965050359150506001600160401b038111156102c2578283fd5b6102ce8682870161012f565b92505061012084013590509250925092565b901515815260200190565b604051601f8201601f191681016001600160401b03811182821017156103135761031361033b565b604052919050565b60006001600160401b038211156103345761033461033b565b5060200290565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220d2bfdb6e55d016c939fdf090b42b753edca4d9cff5ce5aec8df2ec74d328ee4264736f6c63430008010033";

type MockVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVerifier__factory extends ContractFactory {
  constructor(...args: MockVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVerifier> {
    return super.deploy(overrides || {}) as Promise<MockVerifier>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockVerifier {
    return super.attach(address) as MockVerifier;
  }
  connect(signer: Signer): MockVerifier__factory {
    return super.connect(signer) as MockVerifier__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVerifierInterface {
    return new utils.Interface(_abi) as MockVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVerifier {
    return new Contract(address, _abi, signerOrProvider) as MockVerifier;
  }
}
