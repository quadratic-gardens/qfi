/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PollProcessorAndTallyerInterface extends utils.Interface {
  functions: {
    "currentMessageBatchIndex()": FunctionFragment;
    "genProcessMessagesPackedVals(address,uint256,uint256)": FunctionFragment;
    "genProcessMessagesPublicInputHash(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "genTallyVotesPackedVals(uint256,uint256,uint256)": FunctionFragment;
    "genTallyVotesPublicInputHash(uint256,uint256,uint256,uint256)": FunctionFragment;
    "numBatchesProcessed()": FunctionFragment;
    "owner()": FunctionFragment;
    "processMessages(address,uint256,uint256[8])": FunctionFragment;
    "processingComplete()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sbCommitment()": FunctionFragment;
    "sha256Hash(uint256[])": FunctionFragment;
    "tallyBatchNum()": FunctionFragment;
    "tallyCommitment()": FunctionFragment;
    "tallyVotes(address,uint256,uint256[8])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifier()": FunctionFragment;
    "verifyTallyProof(address,uint256[8],uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentMessageBatchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genProcessMessagesPackedVals",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genProcessMessagesPublicInputHash",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "genTallyVotesPackedVals",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genTallyVotesPublicInputHash",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numBatchesProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processMessages",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processingComplete",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sbCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tallyBatchNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tallyCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyTallyProof",
    values: [
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentMessageBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genProcessMessagesPackedVals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genProcessMessagesPublicInputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genTallyVotesPackedVals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genTallyVotesPublicInputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numBatchesProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processingComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sbCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tallyBatchNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tallyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTallyProof",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PollProcessorAndTallyer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PollProcessorAndTallyerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentMessageBatchIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    genProcessMessagesPackedVals(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _numSignUps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    genProcessMessagesPublicInputHash(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _messageRoot: BigNumberish,
      _numSignUps: BigNumberish,
      _currentSbCommitment: BigNumberish,
      _newSbCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    genTallyVotesPackedVals(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    genTallyVotesPublicInputHash(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numBatchesProcessed(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processMessages(
      _poll: string,
      _newSbCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processingComplete(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sbCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tallyBatchNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    tallyCommitment(overrides?: CallOverrides): Promise<[BigNumber]>;

    tallyVotes(
      _poll: string,
      _newTallyCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    verifyTallyProof(
      _poll: string,
      _proof: BigNumberish[],
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  currentMessageBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

  genProcessMessagesPackedVals(
    _poll: string,
    _currentMessageBatchIndex: BigNumberish,
    _numSignUps: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  genProcessMessagesPublicInputHash(
    _poll: string,
    _currentMessageBatchIndex: BigNumberish,
    _messageRoot: BigNumberish,
    _numSignUps: BigNumberish,
    _currentSbCommitment: BigNumberish,
    _newSbCommitment: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  genTallyVotesPackedVals(
    _numSignUps: BigNumberish,
    _batchStartIndex: BigNumberish,
    _tallyBatchSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  genTallyVotesPublicInputHash(
    _numSignUps: BigNumberish,
    _batchStartIndex: BigNumberish,
    _tallyBatchSize: BigNumberish,
    _newTallyCommitment: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numBatchesProcessed(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  processMessages(
    _poll: string,
    _newSbCommitment: BigNumberish,
    _proof: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processingComplete(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  sha256Hash(
    array: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tallyBatchNum(overrides?: CallOverrides): Promise<BigNumber>;

  tallyCommitment(overrides?: CallOverrides): Promise<BigNumber>;

  tallyVotes(
    _poll: string,
    _newTallyCommitment: BigNumberish,
    _proof: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  verifyTallyProof(
    _poll: string,
    _proof: BigNumberish[],
    _numSignUps: BigNumberish,
    _batchStartIndex: BigNumberish,
    _tallyBatchSize: BigNumberish,
    _newTallyCommitment: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    currentMessageBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    genProcessMessagesPackedVals(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _numSignUps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genProcessMessagesPublicInputHash(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _messageRoot: BigNumberish,
      _numSignUps: BigNumberish,
      _currentSbCommitment: BigNumberish,
      _newSbCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genTallyVotesPackedVals(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genTallyVotesPublicInputHash(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numBatchesProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    processMessages(
      _poll: string,
      _newSbCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    processingComplete(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tallyBatchNum(overrides?: CallOverrides): Promise<BigNumber>;

    tallyCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    tallyVotes(
      _poll: string,
      _newTallyCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    verifyTallyProof(
      _poll: string,
      _proof: BigNumberish[],
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    currentMessageBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    genProcessMessagesPackedVals(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _numSignUps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genProcessMessagesPublicInputHash(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _messageRoot: BigNumberish,
      _numSignUps: BigNumberish,
      _currentSbCommitment: BigNumberish,
      _newSbCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genTallyVotesPackedVals(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genTallyVotesPublicInputHash(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numBatchesProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processMessages(
      _poll: string,
      _newSbCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processingComplete(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sbCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tallyBatchNum(overrides?: CallOverrides): Promise<BigNumber>;

    tallyCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    tallyVotes(
      _poll: string,
      _newTallyCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    verifyTallyProof(
      _poll: string,
      _proof: BigNumberish[],
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentMessageBatchIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genProcessMessagesPackedVals(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _numSignUps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genProcessMessagesPublicInputHash(
      _poll: string,
      _currentMessageBatchIndex: BigNumberish,
      _messageRoot: BigNumberish,
      _numSignUps: BigNumberish,
      _currentSbCommitment: BigNumberish,
      _newSbCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genTallyVotesPackedVals(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genTallyVotesPublicInputHash(
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numBatchesProcessed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processMessages(
      _poll: string,
      _newSbCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processingComplete(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sbCommitment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sha256Hash(
      array: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tallyBatchNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tallyCommitment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tallyVotes(
      _poll: string,
      _newTallyCommitment: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyTallyProof(
      _poll: string,
      _proof: BigNumberish[],
      _numSignUps: BigNumberish,
      _batchStartIndex: BigNumberish,
      _tallyBatchSize: BigNumberish,
      _newTallyCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
