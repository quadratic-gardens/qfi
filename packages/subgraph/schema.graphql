# Values for the current status/stage of the QFI.
enum Stage {
  NotInitialized
  WaitingForSignupsAndTopups
  VotingPeriodOpen
  WaitingForFinalization
  Finalized
  Cancelled
}

# Values for the RecipientRegistry requests.
enum RequestType {
  Registration
  Removal
}

# QFI Core entity.
type QFI @entity {
    # Set to the HEX string representation of the QFI smart contract address.
    id: ID!

    # Main fields.
    coordinator: Coordinator
    currentStage: Stage! # Enum.
    voiceCreditFactor: BigInt!
    nextGrantRoundId: BigInt!
    contributorCount: BigInt!
    isStateAqMerged: Boolean!

    # Inherited from MACI.
    stateTreeDepth: BigInt!
    numSignUps: BigInt!
    isInitialized: Boolean
    signUpTimestamp: BigInt!
    # Useful smart contracts addresses.
    signUpGatekeeperAddress: Bytes!
    initialVoiceCreditProxyAddress: Bytes!
    vkRegistryAddress: Bytes
    pollFactoryAddress: Bytes!
    messageAqFactoryPollAddress: Bytes
    stateAqAddress: Bytes!
    nativeERC20TokenAddress: Bytes
    messageAqFactoryGrantRoundAddress: Bytes
    grantRoundFactoryAddress: Bytes
    pollProcessorAndTallyerAddress: Bytes

    # Links.
    recipientRegistry: RecipientRegistry
    currentGrantRound: GrantRound

    # Reverse Lookups.
    grantRounds: [GrantRound!] @derivedFrom(field: "qfi")
    # Specifically, those Polls are GrantRounds (polls[pollId] = g, where g is a GrantRound).
    polls: [GrantRound!] @derivedFrom(field: "qfi")
    
    fundingSources: [FundingSource!] @derivedFrom(field: "qfi")

    createdAt: String!
    lastUpdatedAt: String!
}

# Represents a PublicKey used during the subscription/forwarding of a message. 
type PublicKey @entity {
    # Set to the HEX string representation of the ETH address of the owner of the key.
    # (i.e., can be derived from the tx sender or an address event parameter).
    id: ID!

    # Main fields.
    x: BigInt!
    y: BigInt!

    # Associated voting info.
    lifetimeAmountContributed: BigInt!
    voiceCreditBalance: BigInt!
    stateIndex: BigInt!
    
    # Links.
    grantRound: GrantRound # Can be present if the PublicKey is used in addition to send a message.

    # Reverse Lookup for the messages signed w/ this public key.
    messages: [Message!] @derivedFrom(field: "publicKey")
    # Reverse Lookup for the contribution made w/ this public key.
    contributions: [Contribution!] @derivedFrom(field: "publicKey")

    timestamp: String!

    lastUpdatedAt: String!
}

# A message sent from a public key by a voter.
type Message @entity {
    # Set to the HEX string representation of the tx hash where the message has been sent.
    id: ID!
    
    # Main fields.
    sender: Bytes!
    data: [BigInt!]!
    txHash: Bytes!
    
    # Links.
    publicKey: PublicKey!
    grantRound: GrantRound!
    
    timestamp: String!
}

# The registry where the recipient for the GrantRound are recorded
# (nb. Mainly based on OptimisticRecipientRegistry implementation.)
type RecipientRegistry @entity {
    # Set to the HEX string representation of the OptimisticRecipientRegistry smart contract address.
    id: ID!

    # Main fields.
    grantRoundFactoryAddress: Bytes!
    baseDeposit: BigInt!
    challengePeriodDuration: BigInt!
    controller: Bytes!
    maxRecipients: BigInt!

    # Link.
    grantRound: GrantRound

    # Reverse Lookup for the recipients registered in this registry.
    recipients: [Recipient!] @derivedFrom(field: "recipientRegistry")

    createdAt: String!
    lastUpdatedAt: String!
}

# Represent a Recipient for the GrantRound w/ requests info for add/remove.
# (nb. Mainly based on OptimisticRecipientRegistry implementation.)
type Recipient @entity {
    # Set to the HEX string representation of the ETH address of the recipient.
    # (i.e., can be derived from the tx sender or an address event parameter).
    id: ID!

    # Main fields.
    address: Bytes
    metadata: String
    addedAt: BigInt
    removedAt: BigInt
    voteOptionIndex: BigInt

    # Request fields.
    # nb. we are not storing an history of requests (as the mapping on-chain, just the current/last one).
    requestType: RequestType
    requesterAddress: Bytes
    requestRecipientAddress: Bytes
    requestRecipientMetadata: String
    submissionTime: BigInt
    resolutionTime: BigInt
    deposit: BigInt!
    rejected: Boolean
    # Tx hash mirror.
    requestSubmittedHash: Bytes
    requestResolvedHash: Bytes
    
    # Links.
    recipientRegistry: RecipientRegistry!

    # Reverse Lookup of the claimed donations sent to this recipient.
    donations: [Donation!] @derivedFrom(field: "recipient")
    # Reverse Lookup of the Grant Rounds where the Recipient has participated.
    grantRounds: [GrantRoundRecipient!] @derivedFrom(field: "recipient")
    
    createdAt: String!
    lastUpdatedAt: String!
}

# Represent a Grant Round Factory entity for storing RecipientRegistry and MessageAQFactory addresses.
type GrantRoundFactory @entity {
    # Set to the HEX string representation of the ETH address of the Grant Round Factory.
    # (i.e., can be derived from the tx sender or an address event parameter).
    id: ID!

    messageAqFactoryAddress: Bytes
    recipientRegistryAddress: Bytes

    createdAt: String!
    lastUpdatedAt: String!
}

# Mapping table to handle efficiently the GrantRound-Recipient many-to-many relationship.
type GrantRoundRecipient @entity {
    # Set to the concatenation of `${grantRound.id}-${recipient.id}`.
    id: ID!

    grantRound: GrantRound
    recipient: Recipient!
}

type GrantRound @entity {
    # Set to the HEX string representation of the numeric unique index of the Grant Round.
    id: ID!

    # Main fields (also from Poll).
    # Max values.
    maxMessages: BigInt!
    maxVoteOptions: BigInt!
    # Tree depths.
    intStateTreeDepth: BigInt!
    messageTreeSubDepth: BigInt!
    messageTreeDepth: BigInt!
    voteOptionTreeDepth: BigInt!
    # Batch sizes.
    tallyBatchSize: BigInt!
    messageBatchSize: BigInt!
    # Time and duration.
    duration: BigInt!
    deployTimestamp: BigInt! # Grant Round start time.
    voiceCreditFactor: BigInt!
    # Status.
    isCancelled: Boolean
    isMessageAqMerged: Boolean
    isFinalized: Boolean
    stateAqMerged: Boolean
    # State Ballot commitment.
    mergedStateRoot: BigInt
    tallyHash: String
    # Total amounts spent, votes, and matching funds.
    totalSpent: BigInt
    totalVotes: BigInt
    matchingPoolSize: BigInt

    # Links.
    qfi: QFI!
    recipientRegistry: RecipientRegistry!
    coordinator: Coordinator!

    # Reverse Lookups.
    # Messages related to this grant round.
    messages: [Message!] @derivedFrom(field: "grantRound")
    # Recipients related to this grant round.
    recipients: [GrantRoundRecipient!] @derivedFrom(field: "grantRound")
    # Who has contributed to the grant round.
    contributors: [GrantRoundContributor!] @derivedFrom(field: "grantRound")
    # The contributions to the grant round.
    contributions: [Contribution!] @derivedFrom(field: "grantRound")
    # Who has quadratically voted (w/ VCs) in the grant round.
    votes: [Vote!] @derivedFrom(field: "grantRound")
    
    createdAt: String!
    lastUpdatedAt: String!
}

# MACI/QFI Coordinator.
type Coordinator @entity {
    # Set to the HEX string representation of the ETH address of the coordinator.
    # (i.e., can be derived from the tx sender or an address event parameter).
    id: ID!

    # Main fields.
    address: Bytes!
    publicKey: String!

    # Links.
    qfi: QFI!
    grantRounds: [GrantRound!] @derivedFrom(field: "coordinator")

    timestamp: String!
}

# A contributor who has sent tokens to the matching pool in exchange of VCs.
type Contributor @entity {
    # Set to the HEX string representation of the ETH address of the contributor.
    # (i.e., can be derived from the tx sender or an address event parameter).
    id: ID!
    
    # Main fields.
    address: Bytes! # Eth EOA.
    voiceCredits: BigInt!
    isRegistered: Boolean!
    txHash: Bytes!

    # Link.
    publicKey: PublicKey!
    grantRounds: [GrantRoundContributor!] @derivedFrom(field: "contributor")

    # Reverse lookups.
    contributions: [Contribution!] @derivedFrom(field: "contributor")
    votes: [Vote!] @derivedFrom(field: "contributor")
    
    createdAt: String!
    lastUpdatedAt: String!
}

# Mapping table to handle efficiently the GrantRound-Contributor many-to-many relationship.
type GrantRoundContributor @entity {
    # Set to the concatenation of `${grantRound.id}-${contributor.id}`.
    id: ID!

    grantRound: GrantRound!
    contributor: Contributor!
}

type Contribution @entity {
    # Set to the concatenation of `${grantRound.id}-${contributor.id}`.
    id: ID!

    # Main fields.
    amount: BigInt!
    voiceCredits: BigInt!

    # Links.
    contributor: Contributor!
    grantRound: GrantRound!
    publicKey: PublicKey!

    createdAt: String!
    lastUpdatedAt: String!
}

# An amount of funds donated.
type Donation @entity {
    # Set to the concatenation of `${grantRound.id}-${recipient.id}`.
    id: ID!

    # Main fields.
    amount: BigInt!
    voteOptionIndex: BigInt!

    # Links
    recipient: Recipient!
    grantRound: GrantRound!

    createdAt: String!
}

# This entity is stored when a contributor cast a vote (publish a message).
type Vote @entity {
    # Set to the concatenation of `${grantRound.id}-${contributor.id}`.
    id: ID!

    # Links.
    contributor: Contributor!
    grantRound: GrantRound!
}

# Represent a funding source to the match poll for a Grant Round.
type FundingSource @entity {
    # Set to the HEX string representation of the ETH address of the Funding Source.
    # (i.e., can be derived from an address event parameter).
    id: ID!

    qfi: QFI!
    address: Bytes!
    isActive: Boolean! # False when removed, otherwise true.

    createdAt: String!
    lastUpdatedAt: String!
}