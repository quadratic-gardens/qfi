/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  FreeForAllGatekeeper,
  FreeForAllGatekeeperInterface,
} from "../../../../contracts/flavors/F.sol/FreeForAllGatekeeper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806324b8fbf614610030575b600080fd5b61004261003e36600461005a565b5050565b005b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561006d57600080fd5b82356001600160a01b038116811461008457600080fd5b915060208301356001600160401b03808211156100a057600080fd5b818501915085601f8301126100b457600080fd5b8135818111156100c6576100c6610044565b604051601f8201601f19908116603f011681019083821181831017156100ee576100ee610044565b8160405282815288602084870101111561010757600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220ec82d9283bae10f5485f9841f1fb41ff075cc8288e2ac786382960c73ab5d62564736f6c634300080a0033";

type FreeForAllGatekeeperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FreeForAllGatekeeperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FreeForAllGatekeeper__factory extends ContractFactory {
  constructor(...args: FreeForAllGatekeeperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FreeForAllGatekeeper> {
    return super.deploy(overrides || {}) as Promise<FreeForAllGatekeeper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FreeForAllGatekeeper {
    return super.attach(address) as FreeForAllGatekeeper;
  }
  override connect(signer: Signer): FreeForAllGatekeeper__factory {
    return super.connect(signer) as FreeForAllGatekeeper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FreeForAllGatekeeperInterface {
    return new utils.Interface(_abi) as FreeForAllGatekeeperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FreeForAllGatekeeper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FreeForAllGatekeeper;
  }
}
