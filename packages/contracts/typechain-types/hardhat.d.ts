/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AccQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueue__factory>;
    getContractFactory(
      name: "AccQueueBinary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueBinary__factory>;
    getContractFactory(
      name: "AccQueueQuinary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccQueueQuinary__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;
    getContractFactory(
      name: "PoseidonT6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT6__factory>;
    getContractFactory(
      name: "ConstantInitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConstantInitialVoiceCreditProxy__factory>;
    getContractFactory(
      name: "InitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitialVoiceCreditProxy__factory>;
    getContractFactory(
      name: "FreeForAllGatekeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FreeForAllGatekeeper__factory>;
    getContractFactory(
      name: "IInitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitialVoiceCreditProxy__factory>;
    getContractFactory(
      name: "ISignUpGatekeeper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignUpGatekeeper__factory>;
    getContractFactory(
      name: "InitialVoiceCreditProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitialVoiceCreditProxy__factory>;
    getContractFactory(
      name: "NFTSignup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTSignup__factory>;
    getContractFactory(
      name: "SignUpNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignUpNFT__factory>;
    getContractFactory(
      name: "SimpleHackathon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleHackathon__factory>;
    getContractFactory(
      name: "Jubjub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Jubjub__factory>;
    getContractFactory(
      name: "JubjubFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JubjubFactory__factory>;
    getContractFactory(
      name: "MessageTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageTree__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;
    getContractFactory(
      name: "PoseidonT4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT4__factory>;
    getContractFactory(
      name: "PoseidonT5",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT5__factory>;
    getContractFactory(
      name: "PoseidonT6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT6__factory>;
    getContractFactory(
      name: "BaseRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRecipientRegistry__factory>;
    getContractFactory(
      name: "IRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRecipientRegistry__factory>;
    getContractFactory(
      name: "OptimisticRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticRecipientRegistry__factory>;
    getContractFactory(
      name: "SimpleRecipientRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleRecipientRegistry__factory>;
    getContractFactory(
      name: "StateTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateTree__factory>;
    getContractFactory(
      name: "LibClone",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibClone__factory>;
    getContractFactory(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicallable__factory>;
    getContractFactory(
      name: "VkRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VkRegistry__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AccQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueue>;
    getContractAt(
      name: "AccQueueBinary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueBinary>;
    getContractAt(
      name: "AccQueueQuinary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccQueueQuinary>;
    getContractAt(
      name: "PoseidonT3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT3>;
    getContractAt(
      name: "PoseidonT6",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT6>;
    getContractAt(
      name: "ConstantInitialVoiceCreditProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConstantInitialVoiceCreditProxy>;
    getContractAt(
      name: "InitialVoiceCreditProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitialVoiceCreditProxy>;
    getContractAt(
      name: "FreeForAllGatekeeper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FreeForAllGatekeeper>;
    getContractAt(
      name: "IInitialVoiceCreditProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitialVoiceCreditProxy>;
    getContractAt(
      name: "ISignUpGatekeeper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignUpGatekeeper>;
    getContractAt(
      name: "InitialVoiceCreditProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitialVoiceCreditProxy>;
    getContractAt(
      name: "NFTSignup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTSignup>;
    getContractAt(
      name: "SignUpNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignUpNFT>;
    getContractAt(
      name: "SimpleHackathon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleHackathon>;
    getContractAt(
      name: "Jubjub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Jubjub>;
    getContractAt(
      name: "JubjubFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JubjubFactory>;
    getContractAt(
      name: "MessageTree",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageTree>;
    getContractAt(
      name: "PoseidonT3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT3>;
    getContractAt(
      name: "PoseidonT4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT4>;
    getContractAt(
      name: "PoseidonT5",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT5>;
    getContractAt(
      name: "PoseidonT6",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT6>;
    getContractAt(
      name: "BaseRecipientRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRecipientRegistry>;
    getContractAt(
      name: "IRecipientRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRecipientRegistry>;
    getContractAt(
      name: "OptimisticRecipientRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticRecipientRegistry>;
    getContractAt(
      name: "SimpleRecipientRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleRecipientRegistry>;
    getContractAt(
      name: "StateTree",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StateTree>;
    getContractAt(
      name: "LibClone",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibClone>;
    getContractAt(
      name: "Multicallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicallable>;
    getContractAt(
      name: "VkRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VkRegistry>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
